<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Unity 编辑器拓展</title>
      <link href="/2024/09/28/unity_extension/"/>
      <url>/2024/09/28/unity_extension/</url>
      
        <content type="html"><![CDATA[<h2 id="编辑器开发基础"><a href="#编辑器开发基础" class="headerlink" title="编辑器开发基础"></a>编辑器开发基础</h2><p>在Unity中存在特殊的几种文件夹：</p><ol><li>Editor</li><li>Resources</li><li>StreamingAssets</li><li>…</li></ol><p>Editor 文件夹用于存放编辑器功能的相关脚本方便项目的开发，在该文件夹中的脚本在打包时会被排除，不会被打包进程序。因此所有的编辑器拓展代码都会被放入 <code>Editor</code> 文件夹中。</p><p>开发者可以将多个 Editor 文件夹放置在 Assets 文件夹内的任何位置。例如 <code>Assets/Editor</code>文件夹或 <code>Assets/</code> 下的任意子文件夹中。</p><h2 id="编辑器常用类"><a href="#编辑器常用类" class="headerlink" title="编辑器常用类"></a>编辑器常用类</h2><h3 id="Rect"><a href="#Rect" class="headerlink" title="Rect"></a>Rect</h3><p>这个类型在编辑器拓展中十分常见。它以左上角为坐标原点，X往右递增，Y往下递增</p><blockquote><p>A 2D Rectangle defined by X and Y position, width and height.</p></blockquote><h3 id="布局组件"><a href="#布局组件" class="headerlink" title="布局组件"></a>布局组件</h3><p>布局组件有两种分类方法，一种分法是按照 “是否可在游戏运行时中显示” 为标准，可以分为 <code>GUI / GUILayout</code> 和 <code>EditorGUI / EditorGUILayout</code>，另一种分法是按照</p><h4 id="GUI-GUILayout"><a href="#GUI-GUILayout" class="headerlink" title="GUI &#x2F; GUILayout"></a>GUI &#x2F; GUILayout</h4><p><code>GUI / GUILayout</code> 主要是用于 Game 视图的基本 UI 信息显示与逻辑操作。</p><p>偶尔的，GUILayout除了在Game视图进行部分 runtime 的逻辑操作，还会与 EditorGUILayout 配合，用于在 Editor 编辑器模式下的扩展功能。</p><span id="more"></span><h5 id="按钮类组件"><a href="#按钮类组件" class="headerlink" title="按钮类组件"></a>按钮类组件</h5><p><strong>Button</strong></p><p>关键字： <code>GUILayout.Button</code></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是在Game视图中绘制GUI，所以需要继承于一个Mono</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GUITutorialDemo</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//所有GUI绘制都必须在这个函数内部： MonoBehaviour.GUI()</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;I&#x27;m a button&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Selection</strong></p><p>关键字： <code>GUILayout.SelectionGrid</code></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义多按钮选择的index</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> index;</span><br><span class="line"><span class="comment">//定义多按钮的名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span>[] buttonNames = <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;First&quot;</span>, <span class="string">&quot;Second&quot;</span>, <span class="string">&quot;Third&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个参数是当前选择按钮的index。</span></span><br><span class="line"><span class="comment">//第二个参数是多个按钮的名称，数组长度决定了按钮个数。</span></span><br><span class="line"><span class="comment">//第三个参数是表示一行按钮有多少个，这里是2，表示一行最多2个按钮。</span></span><br><span class="line">index = GUILayout.SelectionGrid(index, buttonNames, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><strong>Toolbar</strong></p><p>关键字： <code>GUILayout.Toolbar</code></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> index;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span>[] buttonNames = <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;First&quot;</span>, <span class="string">&quot;Second&quot;</span>, <span class="string">&quot;Third&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="comment">//第一个参数是当前选择 按钮 的index。</span></span><br><span class="line"><span class="comment">//第二个参数是多个 按钮 的名称，数组长度决定了 按钮 个数。</span></span><br><span class="line">index = GUILayout.Toolbar(index, buttonNames);</span><br></pre></td></tr></table></figure><p><strong>Toggle</strong></p><p>关键字： <code>GUILayout.Toggle</code></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//记录当前toggle真值情况</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> toggleValue;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//第二个参数是Toggle文本信息</span></span><br><span class="line">toggleValue = GUILayout.Toggle(toggleValue, <span class="string">&quot;This is a toggle&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="文本标签类"><a href="#文本标签类" class="headerlink" title="文本标签类"></a>文本标签类</h5><p><strong>Label</strong></p><p>关键字： <code>GUILayout.Label</code></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">GUILayout.Label(<span class="string">&quot;This is a Label Text&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>TextField</strong></p><p>关键字： <code>GUILayout.TextArea</code>， <code>GUILayout.TextField</code></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> areaText = <span class="string">&quot;multi-line text&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> singleText = <span class="string">&quot;single-line text..&quot;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// Make a multi-line text field where the use can edit a string</span></span><br><span class="line">areaText = GUILayout.TextArea(areaText);</span><br><span class="line"><span class="comment">//Make a single-line text field where the use can edit a string</span></span><br><span class="line">singleText = GUILayout.TextField(singleText);</span><br><span class="line"><span class="comment">//TextArea 支持多行编辑，就是回车之后文本也能换行。</span></span><br><span class="line"><span class="comment">//Textfield 不支持多行编辑，回车之后没反应。</span></span><br><span class="line"><span class="comment">//PS: 如果文本有类似\n的换行符，文本也会换行，只是不支持换行编辑而已）</span></span><br></pre></td></tr></table></figure><h5 id="滚动滑条类"><a href="#滚动滑条类" class="headerlink" title="滚动滑条类"></a>滚动滑条类</h5><p><strong>Slider</strong></p><p>关键字：<code>GUILayout.HorizontalSlider</code>， <code>GUILayout.VerticalSlider</code></p><p>这里只展示 Horizontal Slider 的用法，Vertical Slider 的用法同理。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> m_SliderValue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnGUI</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    GUILayout.Label(<span class="string">&quot;Horizontal&quot;</span>);</span><br><span class="line">    GUILayout.BeginHorizontal(m_ScrollPosition)</span><br><span class="line">    &#123;</span><br><span class="line">    GUILayout.HorizontalSlider(m_SliderValue, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    GUILayout.EndHorizontal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ScrollBar</strong></p><p>关键字： <code>GUILayout.HorizontalScrollbar</code>， <code>GUILayout.VerticalScrollbar</code></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> horizontalValue = <span class="number">0</span>; <span class="comment">//滑动条数值</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> verticalValue = <span class="number">0</span>; <span class="comment">//滑动条数值</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> blockSize = <span class="number">10</span>; <span class="comment">//滑动块大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> leftValue = <span class="number">0</span>; <span class="comment">//最左侧/最上侧数值</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> rightValue = <span class="number">100</span>; <span class="comment">//最右侧/最下侧数值</span></span><br><span class="line">...</span><br><span class="line">horizontalValue = GUILayout.HorizontalScrollbar(horizontalValue, blockSize, leftValue, rightValue, GUILayout.Width(<span class="number">300</span>));</span><br><span class="line">verticalValue = GUILayout.VerticalScrollbar(verticalValue, blockSize, leftValue, rightValue);</span><br></pre></td></tr></table></figure><h5 id="区块布局类"><a href="#区块布局类" class="headerlink" title="区块布局类"></a>区块布局类</h5><p><strong>Box</strong></p><p>关键字： <code>GUILayout.Box</code></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//后两个参数定义了box area的长宽，后文会介绍参数意义</span></span><br><span class="line">GUILayout.Box(<span class="string">&quot;Box Area&quot;</span>, GUILayout.Width(<span class="number">200</span>), GUILayout.Height(<span class="number">200</span>));</span><br></pre></td></tr></table></figure><p><strong>Area</strong></p><p>关键字： <code>GUILayout.BeginArea</code>， <code>GUILayout.EndArea</code></p><p>布局方式分为自动布局 <code>(GUILayout)</code> 和手动布局 <code>(Area)</code>，在 <code>Area</code> 模式下，开发者可以自己自己指定窗口的大小，并且可以以坐标点的方式指定该区域内所有元素的位置。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">GUILayout.BeginArea(<span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>));</span><br><span class="line">&#123;</span><br><span class="line">    GUI.Label(<span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">20</span>), <span class="string">&quot;This is a test&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">GUILayout.EndArea();</span><br></pre></td></tr></table></figure><p><strong>Horizontal &#x2F; Vertical</strong></p><p>关键字: <code>GUILayout.BeginHorizontal</code>, <code>GUILayout. EndHorizontal</code></p><p> <code>GUILayout.BeginVertical</code>, <code>GUILayout.EndVertical</code></p><p>如果需要对界面的布局进行调整，可以使用 Horizontal 和 Vertical 方法，将需要排版的元素放在 <code>BeginXXX</code> 和 <code>EndXXX</code> 之间。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">GUILayout.BeginHorizontal()</span><br><span class="line"><span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;Button Click&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(<span class="string">&quot;Button Clicked&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">GUILayout.EndHorizontal()</span><br><span class="line"></span><br><span class="line">GUILayout.BeginVertical()</span><br><span class="line"><span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;Button Click&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(<span class="string">&quot;Button Clicked&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">GUILayout.EndVertical()</span><br></pre></td></tr></table></figure><p>如果希望让代码结构更加直观，可以使用 c# 自身的特性，将需要排版的代码使用花括号包起来。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">GUILayout.BeginHorizontal()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;Button Click&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Button Clicked&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">GUILayout.EndHorizontal()</span><br><span class="line"></span><br><span class="line">GUILayout.BeginVertical()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;Button Click&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Button Clicked&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">GUILayout.EndVertical()</span><br></pre></td></tr></table></figure><p><strong>ScrollView</strong></p><p>关键字：<code>GUILayout.BeginScrollView</code>，<code>GUILayout.EndScrollView</code></p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Vector2 scrollViewRoot; <span class="comment">//定义滑动窗口当前滑动值，如果不使用这个vector2，滑动窗口将无法滑动</span></span><br><span class="line">...</span><br><span class="line">GUILayout.BeginArea(<span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">400</span>)); <span class="comment">//定义可视化区域</span></span><br><span class="line">scrollViewRoot = GUILayout.BeginScrollView(scrollViewRoot); <span class="comment">//定义滑动视图</span></span><br><span class="line">GUILayout.Button(<span class="string">&quot;Buttons&quot;</span>, GUILayout.Height(<span class="number">200</span>)); <span class="comment">//定义组件1，高度200</span></span><br><span class="line">GUILayout.Button(<span class="string">&quot;Buttons&quot;</span>, GUILayout.Height(<span class="number">200</span>)); <span class="comment">//定义组件2，高度200</span></span><br><span class="line">GUILayout.Button(<span class="string">&quot;Buttons&quot;</span>, GUILayout.Height(<span class="number">200</span>)); <span class="comment">//定义组件3，高度200</span></span><br><span class="line">GUILayout.EndScrollView(); <span class="comment">//结束滑动窗口</span></span><br><span class="line">GUILayout.EndArea();<span class="comment">// 结束区域定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//由于区域是400x400，有3个高度为200的button，3*200&gt;400，视图内容会越界，滑动窗口才有意义。</span></span><br></pre></td></tr></table></figure><p><strong>Space</strong></p><p>关键字： <code>GUILayout.Space</code>，<code>GUILayout.FlexibleSpace</code></p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">GUILayout.BeginArea(<span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">400</span>)); <span class="comment">//定义400 x 400 可视化区域</span></span><br><span class="line"></span><br><span class="line">GUILayout.BeginHorizontal(); <span class="comment">//开始水平布局</span></span><br><span class="line">GUILayout.Button(<span class="string">&quot;B1&quot;</span>, GUILayout.Width(<span class="number">100</span>)); <span class="comment">//定义宽度100的按钮</span></span><br><span class="line">GUILayout.FlexibleSpace(); <span class="comment">//插入一个“灵活的”空白组件</span></span><br><span class="line">GUILayout.Button(<span class="string">&quot;B2&quot;</span>, GUILayout.Width(<span class="number">50</span>)); <span class="comment">//定义宽度50的按钮</span></span><br><span class="line">GUILayout.EndHorizontal(); <span class="comment">//结束水平布局</span></span><br><span class="line">GUILayout.Button(<span class="string">&quot;length&quot;</span>); <span class="comment">//定义默认宽度按钮，其宽度会自动扩展到区域宽度：400</span></span><br><span class="line"></span><br><span class="line">GUILayout.Space(<span class="number">100</span>); <span class="comment">//手动间隔100个像素单位</span></span><br><span class="line"></span><br><span class="line">GUILayout.BeginHorizontal(); <span class="comment">//开始水平布局</span></span><br><span class="line">GUILayout.Button(<span class="string">&quot;B1&quot;</span>, GUILayout.Width(<span class="number">100</span>)); <span class="comment">//定义宽度100的按钮</span></span><br><span class="line">GUILayout.Space(<span class="number">200</span>); <span class="comment">//手动间隔200个像素单位</span></span><br><span class="line">GUILayout.Button(<span class="string">&quot;B2&quot;</span>, GUILayout.Width(<span class="number">50</span>));<span class="comment">//定义宽度50的按钮</span></span><br><span class="line">GUILayout.EndHorizontal();<span class="comment">//结束水平布局</span></span><br><span class="line">GUILayout.Button(<span class="string">&quot;length&quot;</span>); <span class="comment">//定义默认宽度按钮，其宽度会自动扩展到区域宽度：400</span></span><br><span class="line"></span><br><span class="line">GUILayout.EndArea(); <span class="comment">//结束区域定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//两者区别就在上述样例图片中，这是手动间隔排版所用方法</span></span><br></pre></td></tr></table></figure><p><strong>GUILayoutOption</strong></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">GUILayout.Width(<span class="built_in">float</span> width) <span class="comment">// 设置控件的宽度</span></span><br><span class="line">GUILayout.Height(<span class="built_in">float</span> height) <span class="comment">// 设置控件的高度</span></span><br><span class="line">GUILayout.MinWidth(<span class="built_in">float</span> width) <span class="comment">// 设置控件的最小宽度</span></span><br><span class="line">GUILayout.MinHeight(<span class="built_in">float</span> height) <span class="comment">// 设置控件的最小高度</span></span><br><span class="line">GUILayout.MaxWidth(<span class="built_in">float</span> width)<span class="comment">// 设置控件的最大宽度</span></span><br><span class="line">GUILayout.MaxHeight(<span class="built_in">float</span> width) <span class="comment">// 设置控件的最大高度</span></span><br><span class="line">GUILayout.ExpandHeight(<span class="built_in">bool</span> expand) <span class="comment">// 是否允许自动扩展高度</span></span><br><span class="line">GUILayout.ExpandWidth(<span class="built_in">bool</span> expand) <span class="comment">// 是否允许自动扩展宽度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义宽度700的区域</span></span><br><span class="line">GUILayout.BeginArea(<span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">700</span>, <span class="number">400</span>));</span><br><span class="line"><span class="comment">//默认button，会自动扩展宽度</span></span><br><span class="line">GUILayout.Button(<span class="string">&quot;Default Button&quot;</span>);</span><br><span class="line"><span class="comment">//定义100宽度，不会自动扩展</span></span><br><span class="line">GUILayout.Button(<span class="string">&quot;Button with 100 width&quot;</span>, GUILayout.Width(<span class="number">100</span>));</span><br><span class="line"><span class="comment">//定义最小宽度，会自动扩展，由于扩展的目标是700，所以与默认button相同</span></span><br><span class="line">GUILayout.Button(<span class="string">&quot;Button with 200 minWidth&quot;</span>, GUILayout.MinWidth(<span class="number">200</span>));</span><br><span class="line"><span class="comment">//定义最大宽度，会自动扩展，但是扩展目标是700，大于300，所以还是300宽度</span></span><br><span class="line">GUILayout.Button(<span class="string">&quot;Button with 300 maxWidth&quot;</span>, GUILayout.MaxWidth(<span class="number">300</span>));</span><br><span class="line"><span class="comment">//禁止自动扩展，宽度是文本自适应宽度。</span></span><br><span class="line">GUILayout.Button(<span class="string">&quot;Button with false expand&quot;</span>, GUILayout.ExpandWidth(<span class="literal">false</span>)); </span><br><span class="line"><span class="comment">//结束区域定义</span></span><br><span class="line">GUILayout.EndArea();</span><br></pre></td></tr></table></figure><h4 id="EditorGUI-EditorGUILayout"><a href="#EditorGUI-EditorGUILayout" class="headerlink" title="EditorGUI &#x2F; EditorGUILayout"></a>EditorGUI &#x2F; EditorGUILayout</h4><h5 id="编辑器的基本面板"><a href="#编辑器的基本面板" class="headerlink" title="编辑器的基本面板"></a>编辑器的基本面板</h5><p><strong>EditorWindow</strong></p><p>关键字：<code>UnityEditor.EditorWindow</code>，<code>MenuItem</code></p><p><code>EditorWindow</code> 所有的GUI绘制，都是在 <code>OnGUI()</code> 方法中。</p><p><code>MenuItem</code> 属性用于向主菜单和监视面板上下文菜单中添加菜单项，它能够将任何静态函数转变为菜单命令。</p><p><code>[MenuItem(&quot;EditorExtension/Menu/Hello Unity&quot;)]</code>，这个 <code>Attribute</code> 需要引用 <code>UnityEditor</code> 的命名空间。用于拓展Unity的菜单栏。</p><p><code>EditorExtension/Menu/Hello Unity</code>是菜单的路径，也可以添加到默认的菜单中如 <code>Component/UnitEditor</code></p><p><code>public static void HelloUnity()</code>为点击该选项后的调用函数，需注意的是函数必须是静态的。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;`</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MenuItemExample</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">MenuItem(<span class="string">&quot;EditorExtension/Menu/Hello Unity&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">HelloUnity</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Hello Unity&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">MenuItem(<span class="string">&quot;EditorExtension/Menu/Open Bilibili&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OpenBilibili</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Application.OpenURL(<span class="string">&quot;https://bilibili.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Inspector</strong></p><p>关键字：<code>UnityEditor.Editor</code>， <code>CustomEditor</code></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Mono 部分代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TutorialMono</span> : <span class="title">MonoBehaviour</span> <span class="comment">//基本就是个空的Mono</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Editor 部分代码</span></span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定自定义Editor所要绑定的Mono类型，这里就是typeof(TutorialMono)</span></span><br><span class="line">[<span class="meta">CustomEditor(typeof(TutorialMono))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TutorialMonoInspector</span> : <span class="title">Editor</span> <span class="comment">//继承Editor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> TutorialMono m_target; <span class="comment">//在Inspector上显示的实例目标</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 当对象活跃时（在Inspector中显示时），unity自动调用此函数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_target = target <span class="keyword">as</span> TutorialMono; <span class="comment">//绑定target，target官方解释： The object being inspected</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 重写OnInspectorGUI，之后所有的GUI绘制都在此方法中。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnInspectorGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//调用父类方法绘制一次GUI，TutorialMono中原本的可序列化数据等会在这里绘制一次。</span></span><br><span class="line">        <span class="keyword">base</span>.OnInspectorGUI();</span><br><span class="line">        <span class="comment">//如果不调用父类方法，则这个Mono的Inspector全权由下面代码绘制。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;这是一个按钮&quot;</span>))   <span class="comment">//自定义按钮</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="按钮类组件-1"><a href="#按钮类组件-1" class="headerlink" title="按钮类组件"></a>按钮类组件</h5><p><strong>Button</strong></p><p>关键字： <code>GUILayout.Button</code></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;这是一个按钮&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(<span class="string">&quot;按了下按钮&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DropdownButton</strong></p><p>和Button的区别大致是 Button是鼠标抬起触发，Dropdown是鼠标按下就触发。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> GUIContent content = <span class="keyword">new</span> GUIContent(<span class="string">&quot;DropdownButton&quot;</span>); <span class="comment">//定义一下显示内容</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (EditorGUILayout.DropdownButton(content, FocusType.Passive))</span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(<span class="string">&quot;据说是按下就触发，而不是抬起&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="显示域"><a href="#显示域" class="headerlink" title="显示域"></a>显示域</h5><p><strong>ObjectField</strong></p><p>关键字：<code>EditorGUILayout.ObjectField</code></p><p>这个组件几乎是必用控件，Editor的根本目的就是在编辑模式下，对某些资源对象（Object）进行“增删改查”。</p><p>同时，这个Object不只是 GameObject，只要是继承 <code>UnityEngine.Object</code> 的类型，都可以用这个方法来获取，比如：Texture，Material等等。</p><p>值得注意的是，所有的 <code>Field</code> 类，如果不把数据放在左边赋值，那么在输入框内的修改将不会保存。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> GameObject m_objectValue; <span class="comment">//定义Object</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">//第一个参数： 目标Object</span></span><br><span class="line"><span class="comment">//第二个参数： Object的类型</span></span><br><span class="line"><span class="comment">//第三个参数： 是否允许赋值场景对象（一般是赋值Project中的Asset资源对象）</span></span><br><span class="line"><span class="comment">//最后需要一个【as】进行类型转换</span></span><br><span class="line">m_objectValue = EditorGUILayout.ObjectField(m_objectValue, <span class="keyword">typeof</span>(GameObject), <span class="literal">true</span>) <span class="keyword">as</span> GameObject;</span><br></pre></td></tr></table></figure><p><strong>IntField</strong></p><p>关键字：<code>EditorGUILayout.IntField</code></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> m_intValue; <span class="comment">//定义修改内容；</span></span><br><span class="line">...</span><br><span class="line">m_intValue = EditorGUILayout.IntField(<span class="string">&quot;整型输入框&quot;</span>, m_intValue); <span class="comment">//Title + Value</span></span><br></pre></td></tr></table></figure><p><strong>FloatField、TextField、Vector3Field…</strong></p><p>关键字：FloatField， TextField，Vector3Field…</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> m_textValue;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> m_floatValue;</span><br><span class="line"><span class="keyword">private</span> Vector2 m_vec2;</span><br><span class="line"><span class="keyword">private</span> Vector3 m_vec3;</span><br><span class="line"><span class="keyword">private</span> Vector4 m_vec4;</span><br><span class="line"><span class="keyword">private</span> Bounds m_bounds;</span><br><span class="line"><span class="keyword">private</span> BoundsInt m_boundsInt;</span><br><span class="line">...</span><br><span class="line">m_floatValue = EditorGUILayout.FloatField(<span class="string">&quot;Float 输入：&quot;</span>, m_floatValue);</span><br><span class="line">m_textValue = EditorGUILayout.TextField(<span class="string">&quot;Text输入：&quot;</span>, m_textValue);</span><br><span class="line">m_vec2 = EditorGUILayout.Vector2Field(<span class="string">&quot;Vec2输入： &quot;</span>, m_vec2);</span><br><span class="line">m_vec3 = EditorGUILayout.Vector3Field(<span class="string">&quot;Vec3输入： &quot;</span>, m_vec3);</span><br><span class="line">m_vec4 = EditorGUILayout.Vector4Field(<span class="string">&quot;Vec4输入： &quot;</span>, m_vec4);</span><br><span class="line">m_bounds = EditorGUILayout.BoundsField(<span class="string">&quot;Bounds输入： &quot;</span>, m_bounds);</span><br><span class="line">m_boundsInt = EditorGUILayout.BoundsIntField(<span class="string">&quot;Bounds输入： &quot;</span>, m_boundsInt);</span><br></pre></td></tr></table></figure><p><strong>LabelField</strong></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">EditorGUILayout.LabelField(<span class="string">&quot;文本标题&quot;</span>, <span class="string">&quot;文本内容&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>TagField &#x2F; LayerField</strong></p><p>关键字：EditorGUILayout.TagField， EditorGUILayout.LayerField</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> m_layer;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> m_tag;</span><br><span class="line">...</span><br><span class="line">m_layer = EditorGUILayout.LayerField(<span class="string">&quot;层级选择&quot;</span>, m_layer);</span><br><span class="line">m_tag = EditorGUILayout.TagField(<span class="string">&quot;标签选择&quot;</span>, m_tag);</span><br></pre></td></tr></table></figure><p><strong>ColorField</strong></p><p>关键字：EditorGUILayout.ColorField</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Color m_color;</span><br><span class="line"><span class="keyword">private</span> GUIContent colorTitle = <span class="keyword">new</span> GUIContent(<span class="string">&quot;颜色选择&quot;</span>);</span><br><span class="line">...</span><br><span class="line"><span class="comment">//着重强调一下这个重载方法</span></span><br><span class="line"><span class="comment">//第一个参数： GUIContent，通常拿来作为Title</span></span><br><span class="line"><span class="comment">//第二个参数： Color，目标修改数据</span></span><br><span class="line"><span class="comment">//第三个参数： bool ，是否显示拾色器</span></span><br><span class="line"><span class="comment">//第四个参数： bool ，是否显示透明度通道</span></span><br><span class="line"><span class="comment">//第五个参数： bool ，是否支持HDR。</span></span><br><span class="line">m_color = EditorGUILayout.ColorField(colorTitle, m_color, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p><strong>CurveField</strong></p><p>关键字：EditorGUILayout.CurveField， AnimationCurve</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> AnimationCurve m_curve = AnimationCurve.Linear(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">...</span><br><span class="line">m_curve = EditorGUILayout.CurveField(<span class="string">&quot;动画曲线：&quot;</span>, m_curve);</span><br></pre></td></tr></table></figure><h5 id="枚举选择"><a href="#枚举选择" class="headerlink" title="枚举选择"></a>枚举选择</h5><p><strong>单选枚举（EnumPopup）</strong></p><p>关键字：EditorGUILayout.EnumPopup</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">enum</span> TutorialEnum</span><br><span class="line">&#123;</span><br><span class="line">    One,</span><br><span class="line">    Two,</span><br><span class="line">    Three</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> TutorialEnum m_enum;</span><br><span class="line">...</span><br><span class="line">m_enum = (TutorialEnum)EditorGUILayout.EnumPopup(<span class="string">&quot;枚举选择&quot;</span>, m_enum);</span><br></pre></td></tr></table></figure><p><strong>多选枚举（EnumFlagsField）</strong></p><p>关键字：EditorGUILayout.EnumFlagsField</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">enum</span> TutorialEnum</span><br><span class="line">&#123;</span><br><span class="line">    None = <span class="number">0</span>,</span><br><span class="line">    OneAndTwo = One | Two,</span><br><span class="line">    One = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,</span><br><span class="line">    Two = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">    Three = <span class="number">1</span> &lt;&lt; <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> TutorialEnum m_enum;</span><br><span class="line">...</span><br><span class="line">m_enum = (TutorialEnum)EditorGUILayout.EnumFlagsField(<span class="string">&quot;枚举多选&quot;</span>, m_enum);</span><br></pre></td></tr></table></figure><p><strong>单选&#x2F;多选整型（IntPopup&#x2F;MaskField）</strong></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> m_singleInt;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> m_multiInt;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span>[] intSelections = <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;整数10&quot;</span>, <span class="string">&quot;整数20&quot;</span>, <span class="string">&quot;整数30&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span>[] intMultiSelections = <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;1号&quot;</span>, <span class="string">&quot;2号&quot;</span>, <span class="string">&quot;3号&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span>[] intValues = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span> &#125;;</span><br><span class="line">...</span><br><span class="line">m_singleInt = EditorGUILayout.IntPopup(<span class="string">&quot;整数单选框&quot;</span>, m_singleInt, intSelections, intValues);</span><br><span class="line">EditorGUILayout.LabelField(<span class="string">$&quot;m_singleInt is <span class="subst">&#123;m_singleInt&#125;</span>&quot;</span>);</span><br><span class="line">m_multiInt = EditorGUILayout.MaskField(<span class="string">&quot;整数多选框&quot;</span>, m_multiInt, intMultiSelections);</span><br><span class="line">EditorGUILayout.LabelField(<span class="string">$&quot;m_multiInt is <span class="subst">&#123;m_multiInt&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="折叠栏"><a href="#折叠栏" class="headerlink" title="折叠栏"></a>折叠栏</h5><p><strong>Foldout</strong></p><p>关键字： <code>EditorGUILayout.Foldout</code></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> foldOut;</span><br><span class="line">...</span><br><span class="line">foldOut = EditorGUILayout.Foldout(foldOut, <span class="string">&quot;一般路过折叠栏&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (foldOut) <span class="comment">//只有foldout为true时，才会显示下方内容，相当于“折叠”了。</span></span><br><span class="line">&#123;</span><br><span class="line">        EditorGUILayout.LabelField(<span class="string">&quot;这是折叠标签内容&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>FoldoutGroup</strong></p><p>关键字：<code>EditorGUILayout.BeginFoldoutHeaderGroup</code>， <code>EditorGUILayout.EndFoldoutHeaderGroup</code></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> foldOut;</span><br><span class="line">...</span><br><span class="line">foldOut = EditorGUILayout.BeginFoldoutHeaderGroup(foldOut, <span class="string">&quot;折叠栏组&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (foldOut) <span class="comment">//只有foldout为true时，才会显示下方内容，相当于“折叠”了。</span></span><br><span class="line">&#123;</span><br><span class="line">        EditorGUILayout.LabelField(<span class="string">&quot;这是折叠标签内容&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">EditorGUILayout.EndFoldoutHeaderGroup(); <span class="comment">//只不过这种折叠需要成对使用，不然会有BUG</span></span><br></pre></td></tr></table></figure><h5 id="开关控件"><a href="#开关控件" class="headerlink" title="开关控件"></a>开关控件</h5><p><strong>Toggle</strong></p><p>关键字： EditorGUILayout.Toggle，EditorGUILayout.ToggleLeft</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> toggle;</span><br><span class="line">...</span><br><span class="line">toggle = EditorGUILayout.Toggle(<span class="string">&quot;Normal Toggle&quot;</span>, toggle);</span><br><span class="line">toggle = EditorGUILayout.ToggleLeft(<span class="string">&quot;Left Toggle&quot;</span>, toggle);</span><br></pre></td></tr></table></figure><p><strong>ToggleGroup</strong></p><p>关键字：EditorGUILayout.BeginToggleGroup，EditorGUILayout.EndToggleGroup</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> toggle;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> m_inputText;</span><br><span class="line">...</span><br><span class="line">toggle = EditorGUILayout.BeginToggleGroup(<span class="string">&quot;开关组&quot;</span>, toggle);</span><br><span class="line">EditorGUILayout.LabelField(<span class="string">&quot;------Input Field------&quot;</span>);</span><br><span class="line">m_inputText = EditorGUILayout.TextField(<span class="string">&quot;输入内容：&quot;</span>, m_inputText);</span><br><span class="line">EditorGUILayout.EndToggleGroup();</span><br></pre></td></tr></table></figure><h5 id="滑动控件"><a href="#滑动控件" class="headerlink" title="滑动控件"></a>滑动控件</h5><p><strong>Slider</strong></p><p>关键字：EditorGUILayout.Slider，EditorGUILayout.IntSlider</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> m_sliderValue;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> m_sliderIntValue;</span><br><span class="line">...        </span><br><span class="line"><span class="comment">//参数详解：</span></span><br><span class="line"><span class="comment">//第一个参数： string label 控件名称标签  </span></span><br><span class="line"><span class="comment">//第二个参数： float value 滑动当前值  </span></span><br><span class="line"><span class="comment">//第三个参数： float leftValue 滑动最小值   </span></span><br><span class="line"><span class="comment">//第四个参数： float rightValue 滑动最大值</span></span><br><span class="line">m_sliderValue = EditorGUILayout.Slider(<span class="string">&quot;滑动条Sample：&quot;</span>, m_sliderValue, <span class="number">0.123f</span>, <span class="number">7.77f</span>);</span><br><span class="line"><span class="comment">//参数同上</span></span><br><span class="line">m_sliderIntValue = EditorGUILayout.IntSlider(<span class="string">&quot;整数值滑动条&quot;</span>, m_sliderIntValue, <span class="number">2</span>, <span class="number">16</span>);</span><br></pre></td></tr></table></figure><p><strong>MinMaxSlider</strong></p><p>关键字：EditorGUILayout.MinMaxSlider</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> m_leftValue;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> m_rightValue;</span><br><span class="line">...</span><br><span class="line">EditorGUILayout.MinMaxSlider(<span class="string">&quot;双块滑动条&quot;</span>, <span class="keyword">ref</span> m_leftValue, <span class="keyword">ref</span> m_rightValue, <span class="number">0.25f</span>, <span class="number">10.25f</span>);</span><br><span class="line">EditorGUILayout.FloatField(<span class="string">&quot;滑动左值：&quot;</span>, m_leftValue);</span><br><span class="line">EditorGUILayout.FloatField(<span class="string">&quot;滑动右值：&quot;</span>, m_rightValue);</span><br></pre></td></tr></table></figure><h5 id="其他控件"><a href="#其他控件" class="headerlink" title="其他控件"></a>其他控件</h5><p><strong>HelpBox</strong></p><p>关键字： EditorGUILayout.HelpBox</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">EditorGUILayout.HelpBox(<span class="string">&quot;一般提示，你应该这样做...&quot;</span>, MessageType.Info);</span><br><span class="line">EditorGUILayout.HelpBox(<span class="string">&quot;警告提示，你可能需要这样做...&quot;</span>, MessageType.Warning);</span><br><span class="line">EditorGUILayout.HelpBox(<span class="string">&quot;错误提示，你不能这样做...&quot;</span>, MessageType.Error);</span><br></pre></td></tr></table></figure><p><strong>Space</strong></p><p>关键字：EditorGUILayout.Space，GUILayout.FlexibleSpace</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">EditorGUILayout.LabelField(<span class="string">&quot;----上面的Label----&quot;</span>);</span><br><span class="line">EditorGUILayout.Space(<span class="number">10</span>); <span class="comment">//进行10个单位的间隔</span></span><br><span class="line">EditorGUILayout.LabelField(<span class="string">&quot;----下面的Label----&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始水平布局</span></span><br><span class="line">EditorGUILayout.BeginHorizontal();</span><br><span class="line"><span class="comment">//固定button长度： 200</span></span><br><span class="line">GUILayout.Button(<span class="string">&quot;1号button&quot;</span>, GUILayout.Width(<span class="number">200</span>));</span><br><span class="line"><span class="comment">// 自动填充间隔，如果窗口宽600px，那这种写法就是：【左button：200px】【自动间隔：200px】【右button ：200px】</span></span><br><span class="line">GUILayout.FlexibleSpace();</span><br><span class="line"><span class="comment">//固定button长度： 200</span></span><br><span class="line">GUILayout.Button(<span class="string">&quot;2号button&quot;</span>, GUILayout.Width(<span class="number">200</span>));</span><br><span class="line"><span class="comment">//结束水平布局</span></span><br><span class="line">EditorGUILayout.EndHorizontal();</span><br></pre></td></tr></table></figure><h3 id="Handles"><a href="#Handles" class="headerlink" title="Handles"></a>Handles</h3><p>Handles是Unity在场景视图中，用于操控物体的3D控制器，已内置许多操作GUI，比如我们熟悉的基于Transform对位置、缩放、旋转坐标的操作工具。</p><h4 id="基于Editor类的OnSceneGUI"><a href="#基于Editor类的OnSceneGUI" class="headerlink" title="基于Editor类的OnSceneGUI"></a>基于Editor类的OnSceneGUI</h4><p>在继承自Editor的类中，可以定义【OnSceneGUI()】</p><p>这样当此Edtior在活跃状态时（比如一个Inspector面板展开），在【OnSceneGUI()】方法内的内容将根据SceneView的刷新而调用，触发对应逻辑。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">------HandlesMono .cs------</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HandlesMono</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------HandlesMonoEditor.cs------</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line">[<span class="meta">CustomEditor(typeof(HandlesMono))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HandlesMonoEditor</span> : <span class="title">Editor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnSceneGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;在Editor OnSceneGUI中 调用....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在【Hierarchy】中新建空对象，挂载脚本，点击对象在【Inspector】中显示【HandlesMono】信息，就可以看见信息打印：</p><p>当然，我们使用自定义的Editor，定义自己的Handle GUI操作显示也是可能的。这种GUIs将会非常有用于程序化生成的场景内容、“不可见”的子对象与组。比如路径点与坐标标记点。</p><p>如果在【Hierarchy】中不选择对应物体，则【HandlesMono】不在检视器中显示，意味着【HandlesMono】 Disable掉了，将不会调用【OnSceneGUI】，读者可自行尝试。</p><p>（Tips：如果想要它一直调用，但是又需要选择其他对象怎么办呢？可以点击【Inspector】右侧的【锁】按钮，加锁之后只会显示当前的【Inspector】信息，不会随着选择而更改。）</p><h4 id="基于EditorWindow的手动注册"><a href="#基于EditorWindow的手动注册" class="headerlink" title="基于EditorWindow的手动注册"></a>基于EditorWindow的手动注册</h4><p>有些时候，我们更想在一个Window中进行数据编辑与操作，但是EditorWindow可没有OnSceneGUI，怎么办呢？这时候，需要手动对SceneView的刷新事件进行注册了。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HandlesWindow</span> : <span class="title">EditorWindow</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HandlesWindow m_mainWindow;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">MenuItem(<span class="string">&quot;MyWindows/HandlesWindow&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OpenWindow</span>() <span class="comment">//打开窗口</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        m_mainWindow = EditorWindow.GetWindow&lt;HandlesWindow&gt;();</span><br><span class="line">        m_mainWindow.Show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span> </span><br><span class="line">    &#123;</span><br><span class="line">        SceneView.duringSceneGui += OnSceneGUI; <span class="comment">//对SceneView的刷新事件进行注册</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDisable</span>()</span> </span><br><span class="line">    &#123;</span><br><span class="line">        SceneView.duringSceneGui -= OnSceneGUI; <span class="comment">//对SceneView的刷新事件取消注册</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnSceneGUI</span>(<span class="params">SceneView sceneView</span>) <span class="comment">//自定义刷新事件的委托方法</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;在 Window OnSceneGUI中 调用....&quot;</span>); <span class="comment">//具体逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Handles基本绘制方法"><a href="#Handles基本绘制方法" class="headerlink" title="Handles基本绘制方法"></a>Handles基本绘制方法</h4><p><strong>Label</strong></p><p>关键字： Handles.Label</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Vector3 labelPos = Vector3.zero;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> labelText = <span class="string">&quot;这是在Handles中绘制的文本信息！！！&quot;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//Window GUI 绘制（使用EditorGUILayout）</span></span><br><span class="line">...</span><br><span class="line">Handles.Label(labelPos, labelText); <span class="comment">// 绘制Label</span></span><br></pre></td></tr></table></figure><p><strong>Line&#x2F;Dotted Line</strong></p><p>关键字： Handles.DrawLine，Handles.DrawDottedLine</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.from 2.to 3.thickness（厚度）决定线段厚度</span></span><br><span class="line">Handles.DrawLine(Vector3.zero, <span class="keyword">new</span> Vector3(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>), <span class="number">2f</span>);</span><br><span class="line"><span class="comment">//1.from 2.to 3.ScreenSpaceSize（屏幕空间大小）决定虚线长度</span></span><br><span class="line">Handles.DrawDottedLine(Vector3.zero, Vector3.one, <span class="number">2f</span>);</span><br></pre></td></tr></table></figure><p><strong>Arc&#x2F;Disc</strong></p><p>关键字：Handles.DrawWireArc，Handles.DrawSolidDisc</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Handles.color = <span class="keyword">new</span> Color(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3f</span>); <span class="comment">//提前使用Color进行颜色设置，便于观察</span></span><br><span class="line">Handles.DrawWireArc(Vector3.zero, Vector3.up, Vector3.right, <span class="number">90</span>, <span class="number">2</span>); <span class="comment">//绘制线框弧线</span></span><br><span class="line">Handles.DrawSolidArc(Vector3.zero, Vector3.up, Vector3.back, <span class="number">90</span>, <span class="number">2</span>); <span class="comment">// 绘制填充弧线</span></span><br><span class="line"></span><br><span class="line">Handles.color = <span class="keyword">new</span> Color(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0.3f</span>);</span><br><span class="line">Handles.DrawSolidDisc(<span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>), Vector3.up, <span class="number">5</span>); <span class="comment">//绘制填充圆环</span></span><br><span class="line">Handles.DrawWireDisc(<span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">-5</span>), Vector3.up, <span class="number">5</span>); <span class="comment">//绘制线框圆环</span></span><br></pre></td></tr></table></figure><p><strong>Rectangle</strong></p><p>关键字：Handles.DrawSolidRectangleWithOutline</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Handles.DrawSolidRectangleWithOutline(<span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>), Color.green, Color.red);</span><br></pre></td></tr></table></figure><p><strong>GUI</strong></p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Handles.BeginGUI();</span><br><span class="line">GUILayout.Label(<span class="string">&quot;我是SceneView中的Label&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;我是SceneView中的Button&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(<span class="string">&quot;芜湖&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Handles.EndGUI();</span><br></pre></td></tr></table></figure><h4 id="控制柄"><a href="#控制柄" class="headerlink" title="控制柄"></a>控制柄</h4><p>实际上，Handles核心功能是他的Handle（控制）类，比如：Handles.PositionHandle就是一个类似于Position移动的方法。经典使用例就是在一个List<Vector3>列表中，选择某个列表元素显示他的Position控制柄，然后进行移动。</p><p>但是笔者现阶段使用的较少，不是很熟悉，就不作解释了。</p><p>实际上，OnGUIScene + Handles还有一种应用就是“地形笔刷”，就像Terrain笔刷那样在SceneView里面刷刷刷调整高度、生成植被，这种功能我们也是能自己写一套的，核心是编辑模式下的Event事件。</p><h3 id="Gizmos-Debug"><a href="#Gizmos-Debug" class="headerlink" title="Gizmos&#x2F;Debug"></a>Gizmos&#x2F;Debug</h3><p>Gizmos与Handles类允许你在“SceneView”（场景视图）与“GameView”（游戏视图）中绘制线段与图形，或是可交互控制柄（比如Transform移动的三轴箭头）。这两者一同作用，能让用户在这些视图中自定义扩展显示信息，或是构建自己喜欢的编辑、操作工具。比如，相比起在Inspector（检视器）中输入数字，你可以在游戏里创建一个可拖拽的圆环附着在NPC上，这代表了NPC发现玩家的视听检测范围。</p><p>关键字： MonoBehaviour.OnDrawGizmos， MonoBehaviour.OnDrawGizmosSelected</p><p>Gizmos能且只能在MonoBehaviour相关子类中，使用特定的函数调用，其中：</p><p><code>OnDrawGizmos()</code> 在每帧调佣。所有在OnDrawGizmos中的渲染都是可见的。</p><p><code>OnDrawGizmosSelected()</code> 仅在脚本附加的物体被选择时调用。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GizmosTutotial</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Vector3 size = <span class="keyword">new</span> Vector3(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>); <span class="comment">//定义Cube大小</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDrawGizmos</span>() <span class="comment">//定义OnDrawGizmos方法，类似于Start，Update的定义方式</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        Gizmos.DrawCube(Vector3.zero, size); <span class="comment">//使用Gizmos绘制一个Cube</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EditorUtility，-AssetDatabase，-Selection"><a href="#EditorUtility，-AssetDatabase，-Selection" class="headerlink" title="EditorUtility， AssetDatabase， Selection"></a>EditorUtility， AssetDatabase， Selection</h3><h4 id="EditorUtility"><a href="#EditorUtility" class="headerlink" title="EditorUtility"></a>EditorUtility</h4><p>EditorUtility 是 Unity内置的关于编辑器使用的一些工具类。</p><p><strong>RevealFinder</strong></p><p><code>RevealFinder()</code>: 打开特定文件目录</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">MenuItem(<span class="string">&quot;EditorExtension/Menu/Open PersistentDataPath&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OpenPersistentDataPath</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    EditorUtility.RevealFinder(Application.persistentDataPath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">MenuItem(<span class="string">&quot;EditorExtension/Menu/Open DesignerFolder&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OpenDesignerFolder</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">EditorUtility.RevealFinder(Application.dataPath.Replace(<span class="string">&quot;Assets&quot;</span>, <span class="string">&quot;Library&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AssetDatabase ： 在编辑器模式下，对项目资源的管理</p><p>Selection : 含有当前选择的资源文件&#x2F;文件夹的各种信息。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><strong>参考链接</strong></h2><p><a href="https://docs.unity3d.com/Manual/SpecialFolders.html">Unity 官方文档: 特殊文件夹</a></p><p><a href="https://docs.unity3d.com/ScriptReference/Rect.html">Unity 官方文档: Rect</a></p><p><a href="https://docs.unity3d.com/ScriptReference/Gizmos.html">Unity 官方文档: Gizmos</a></p><p><a href="https://docs.unity3d.com/ScriptReference/Handles.html">Unity 官方文档: Handles</a></p><p><a href="https://zhuanlan.zhihu.com/p/503154643">知乎: Unity3d Editor 编辑器扩展功能详解</a></p>]]></content>
      
      
      <categories>
          
          <category> game development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity 性能优化：界面优化</title>
      <link href="/2024/09/01/unity_optimization_01_ui/"/>
      <url>/2024/09/01/unity_optimization_01_ui/</url>
      
        <content type="html"><![CDATA[<h2 id="拆分画布"><a href="#拆分画布" class="headerlink" title="拆分画布"></a>拆分画布</h2><p>画布组件的主要任务是管理在层级窗口中绘制 UI 元素的网格，并发出渲染这些元素所需的 Draw Call。另一个重要的作用是将网格合并进行批处理以降低 Draw Call 数。</p><p>当画布或其子对象发生变动时，画布需要为所有的 UI 对象重新生成网格，然后重新发送 Draw Call，这被称为画布污染（更改 UI 元素的颜色不会污染画布）。</p><p>UI 元素的改变导致 CPU 使用率大幅上升，通常是由于在单个画布中构建了过多的 UI 元素，这将导致 UI 元素更改时画布需要重新生成的网格过多。</p><p>这种情况一般都可以使用更多的画布来解决，将 UI 拆分为多个画布，将工作的负载分开，简化单个画布所需的任务。</p><h2 id="动静结合"><a href="#动静结合" class="headerlink" title="动静结合"></a>动静结合</h2><p>在拆分 UI 时，可以按照静态、偶尔动态、连续动态三个标准分离 UI 元素。</p><ul><li>静态：永远也不会改变的 UI 元素，例如背景图片。</li><li>偶尔动态：只在做出响应时更改，例如 UI 按钮。</li><li>连续动态：元素会定期更新，例如滚动的轮播图。</li></ul><h2 id="移除-Raycast-Target"><a href="#移除-Raycast-Target" class="headerlink" title="移除 Raycast Target"></a>移除 Raycast Target</h2><p>UI 元素具有 Raycast Target 选项，允许元素通过单击、触摸和其他用户的行为进行交互。当用户行为事件发生时，GraphicsRaycast 组件将执行像素到边界框检查以确定与之交互的是哪个元素。禁用不需要交互的元素的 Raycast Target 选项，就可以减少 GraphicsRaycast 所需要检查的数量，从而提高性能。</p><span id="more"></span><h2 id="不要使用-Animator"><a href="#不要使用-Animator" class="headerlink" title="不要使用 Animator"></a>不要使用 Animator</h2><p>Unity 的 Animator 组件与 UGUI 的搭配完全就是灾难，当使用 Animator 制作 UI 动画时，每一帧 Animator 都会改变 UI 元素的属性导致画布网格需要重新绘制，这将带来巨大的开销。</p><p>因此在开发中应该避免使用 Animator。</p><h2 id="正确的隐藏-UI-元素"><a href="#正确的隐藏-UI-元素" class="headerlink" title="正确的隐藏 UI 元素"></a>正确的隐藏 UI 元素</h2><p>对于 UI 元素，即使将 alpha 值设置为 0 ，也依然会被画布提交到 Draw Call，正确的做法应该是更改 UI 元素的 isActive 属性。或者是使用 CanvasGroup 组件来控制其下所有元素的 alpha 值，当 CanvasGroup 的 alpha 值被设置为 0时，将自动清除其子对象，不会发出任何的 Draw Call。</p><h2 id="使用空的-UI-Text-元素进行全屏交互"><a href="#使用空的-UI-Text-元素进行全屏交互" class="headerlink" title="使用空的 UI Text 元素进行全屏交互"></a>使用空的 UI Text 元素进行全屏交互</h2><p>在强制玩家必须处理弹出窗口才能进入下一步时，通常会激活一个很大的、透明的可交互元素覆盖整个屏幕避免玩家能够点击弹窗后面的 UI 元素。</p><p>这通常会使用 UI Image 来完成，但在弹窗不需要背景图的时候，其实可以使用一个没有定义字体、也没有填充文本的 Text 元素用于屏蔽交互。它不需要生成任何的渲染信息，性能开销相较于将 Image 的透明度调低的方案来说是非常低的。## 拆分画布</p><p>画布组件的主要任务是管理在层级窗口中绘制 UI 元素的网格，并发出渲染这些元素所需的 Draw Call。另一个重要的作用是将网格合并进行批处理以降低 Draw Call 数。</p><p>当画布或其子对象发生变动时，画布需要为所有的 UI 对象重新生成网格，然后重新发送 Draw Call，这被称为画布污染（更改 UI 元素的颜色不会污染画布）。</p><p>UI 元素的改变导致 CPU 使用率大幅上升，通常是由于在单个画布中构建了过多的 UI 元素，这将导致 UI 元素更改时画布需要重新生成的网格过多。</p><h2 id="动静结合-1"><a href="#动静结合-1" class="headerlink" title="动静结合"></a>动静结合</h2><p>这种情况一般都可以使用更多的画布来解决，将 UI 拆分为多个画布，将工作的负载分开，简化单个画布所需的任务。</p><p>在拆分 UI 时，可以按照静态、偶尔动态、连续动态三个标准分离 UI 元素。</p><ul><li>静态：永远也不会改变的 UI 元素，例如背景图片。</li><li>偶尔动态：只在做出响应时更改，例如 UI 按钮。</li><li>连续动态：元素会定期更新，例如滚动的轮播图。</li></ul><h2 id="移除-Raycast-Target-1"><a href="#移除-Raycast-Target-1" class="headerlink" title="移除 Raycast Target"></a>移除 Raycast Target</h2><p>UI 元素具有 Raycast Target 选项，允许元素通过单击、触摸和其他用户的行为进行交互。当用户行为事件发生时，GraphicsRaycast 组件将执行像素到边界框检查以确定与之交互的是哪个元素。禁用不需要交互的元素的 Raycast Target 选项，就可以减少 GraphicsRaycast 所需要检查的数量，从而提高性能。</p><h2 id="不要使用-Animator-1"><a href="#不要使用-Animator-1" class="headerlink" title="不要使用 Animator"></a>不要使用 Animator</h2><p>Unity 的 Animator 组件与 UGUI 的搭配完全就是灾难，当使用 Animator 制作 UI 动画时，每一帧 Animator 都会改变 UI 元素的属性导致画布网格需要重新绘制，这将带来巨大的开销。</p><p>因此在开发中应该避免使用 Animator。</p><h2 id="正确的隐藏-UI-元素-1"><a href="#正确的隐藏-UI-元素-1" class="headerlink" title="正确的隐藏 UI 元素"></a>正确的隐藏 UI 元素</h2><p>对于 UI 元素，即使将 alpha 值设置为 0 ，也依然会被画布提交到 Draw Call，正确的做法应该是更改 UI 元素的 isActive 属性。或者是使用 CanvasGroup 组件来控制其下所有元素的 alpha 值，当 CanvasGroup 的 alpha 值被设置为 0时，将自动清除其子对象，不会发出任何的 Draw Call。</p><h2 id="使用空的-UI-Text-元素进行全屏交互-1"><a href="#使用空的-UI-Text-元素进行全屏交互-1" class="headerlink" title="使用空的 UI Text 元素进行全屏交互"></a>使用空的 UI Text 元素进行全屏交互</h2><p>在强制玩家必须处理弹出窗口才能进入下一步时，通常会激活一个很大的、透明的可交互元素覆盖整个屏幕避免玩家能够点击弹窗后面的 UI 元素。</p><p>这通常会使用 UI Image 来完成，但在弹窗不需要背景图的时候，其实可以使用一个没有定义字体、也没有填充文本的 Text 元素用于屏蔽交互。它不需要生成任何的渲染信息，性能开销相较于将 Image 的透明度调低的方案来说是非常低的。</p>]]></content>
      
      
      <categories>
          
          <category> game development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> performance </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity 性能优化：脚本优化</title>
      <link href="/2024/09/01/unity_optimization_01_script/"/>
      <url>/2024/09/01/unity_optimization_01_script/</url>
      
        <content type="html"><![CDATA[<h2 id="使用最快的GetComponent方法"><a href="#使用最快的GetComponent方法" class="headerlink" title="使用最快的GetComponent方法"></a>使用最快的GetComponent方法</h2><p>在Unity目前的版本中有三种获取组件的方法，分别是 <code>GetComponent&lt;T&gt;</code>、<code>GetComponent(typeof(T))</code>和 <code>GetComponent(string)</code>。第一个方法比第二个方法快一点，第三个方法显著慢于其他两个方法。</p><h2 id="移除空的回调定义"><a href="#移除空的回调定义" class="headerlink" title="移除空的回调定义"></a>移除空的回调定义</h2><p>Monobehaviour 组件在场景中第一次实例化时，引擎会将任何定义好的回调添加到一个函数指针列表中，并在需要的时刻调用这个列表。但这里需要注意的是，即使回调是空的，Unity也会将该回调添加到列表中，这将会在代码被调用时产生一定的额外开销，将浪费少量的CPU资源。</p><p>可以使用以下正则表达式来搜索出代码中空的回调。</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 这里使用 Update 方法举例</span><br><span class="line">void\s*Update\s*?\(\s*?\)\s*?\n*?\(\n*?\s*?\)</span><br></pre></td></tr></table></figure><h2 id="优化组件引用"><a href="#优化组件引用" class="headerlink" title="优化组件引用"></a>优化组件引用</h2><p>如果可以，尽量避免反复去获取相同的组件引用。</p><p>例如以下方法，每次执行时都要重新获得五个组件的引用，这对于CPU而言不是很友好。如果这个方法是在 Update 里调用的，对于性能的影响还要更加严重。</p><p>更好的方法是在Awake中获取这些组件的引用并保存在类中，TakeDamage方法直接调用这些引用。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TakeDamage</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> rb = GetComponent&lt;RigidBody&gt;();</span><br><span class="line">    <span class="keyword">var</span> collider = GetComponent&lt;Collider&gt;();</span><br><span class="line">    <span class="keyword">var</span> ai = GetComponent&lt;AIController&gt;();</span><br><span class="line">    <span class="keyword">var</span> anim = GetComponent&lt;Animator&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (GetComponent&lt;Health&gt;().health &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rb.enabled = <span class="literal">false</span>;</span><br><span class="line">        collider.enabled = <span class="literal">false</span>;</span><br><span class="line">        ai.enabled = <span class="literal">false</span>;</span><br><span class="line">        anim.SetTrigger(<span class="string">&quot;death&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="共享，而不是每个组件都单独获取数据"><a href="#共享，而不是每个组件都单独获取数据" class="headerlink" title="共享，而不是每个组件都单独获取数据"></a>共享，而不是每个组件都单独获取数据</h2><p>让多个对象共享某些计算的结果可以节省性能开销。例如读入的 Json 数据，或者是为一组 AI 计算行动路径。</p><span id="more"></span><h2 id="Update、Coroutines-和-InvokeRepeating"><a href="#Update、Coroutines-和-InvokeRepeating" class="headerlink" title="Update、Coroutines 和 InvokeRepeating"></a>Update、Coroutines 和 InvokeRepeating</h2><p>在写代码时，新人很容易犯的错误就是在Update回调中以超出需要的频率重复调用某段代码。</p><p>举例来说，有一个 AI 寻路处理方法，它的功能是找出它要移动的目的地，当我们将它放入Update回调中时，它可能会占用过度的帧率预算。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    ProcessAI();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们想要提高游戏的性能，可以尝试减少该方法的调用频率，如果效果并没有因为调用的次数减少而变得不可接受的差，那么这部分的性能我们就节省了下来。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> m_AirProcessDelay = <span class="number">0.2f</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> m_Timer = <span class="number">0.01f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    m_Timer += Time.deltaTime;</span><br><span class="line">    <span class="keyword">if</span> (m_Timer &gt; m_AirProcessDelay)</span><br><span class="line">    &#123;</span><br><span class="line">        ProcessAI();</span><br><span class="line">        m_timer -= m_AirProcessDelay;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，我们也可以采用协程的方式编写该代码，这样可以让我们更简单的延迟调用。</p><p>使用协程的主要好处是，它的调用频率完全由开发控制，在时间没到之前它将一直处于空闲状态，从而减少对大多数帧的性能影响。</p><p>但协程与标准的方法调用相比，启用协程会带来额外的开销成本（大约是标准的方法调用的三倍），而且还会需要额外的内存来存储方法的执行状态。</p><p>因此如果使用协程，需要确保降低频率的好处大于此成本。</p><blockquote><p>Note:</p><p>一旦初始化，协程的运行独立于 MonoBehaviour 组件中 Update回调的出发，不管组件是否禁用，都将继续调用协程。因此如果执行大量的GameObject构建和析构操作，协程可能会显得很笨拙。</p><p>当包含了协程的 GameObject 变为不活动时，在该 GameObject 身上运行的协程将全部终止。</p></blockquote><p>如果协程的调用可以被简化为一个 while 循环，则可以考虑使用 <code>InvokeRepeating</code> 代替，它的建立更加简单，并且开销更小。</p><blockquote><p>Note:</p><p>InvokeRepeating 和协程之间的一个重要区别是，InvokeRepeating 完全独立于 MonoBehaviour 和 GameObject 的状态，关闭组件或者让 GameObject 失活都无法停止 InvokeRepeating 。如果想要停止 InvokeRepeating ，有两种方法。</p><ol><li>调用 CancelInvoke：它将停止由给定的 Monobehaviour 发起的所有 InvokeRepeating</li><li>销毁 Monobehaviour 或者其 GameObject。</li></ol></blockquote><h2 id="优化空引用检查"><a href="#优化空引用检查" class="headerlink" title="优化空引用检查"></a>优化空引用检查</h2><p>GameObject 和 Monobehaviour 是特殊的对象，它同时存在于 托管代码 与 本机代码 中，数据会在这两个内存空间中移动，每次移动都将导致额外的 CPU 开销和可能的额外内存分配。</p><p>这种效果通常被称为跨越本机-托管的桥接，发生时有时候会触发 GC，许多方法都会意外地触发这种额外的开销，对 GameObject 的空引用检查就是其中之一。</p><p>可以使用 <code>System.Object.ReferenceEqual</code> 方法避免这种情况，它的功能与常见的判空相同，同时运行速度是原本的两倍。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (gameObject != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!System.Object.ReferenceEqual(gameObject, <span class="literal">null</span>))</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="避免从-GameObject-中检索字符串属性"><a href="#避免从-GameObject-中检索字符串属性" class="headerlink" title="避免从 GameObject 中检索字符串属性"></a>避免从 GameObject 中检索字符串属性</h2><p>从对象中检索字符串属性本应不增加内存成本，但是从 GameObject 中检索字符串属性会触发跨越本机-托管的桥接。</p><p>GameObject 的 name 属性和 tag 属性都受此影响，因此最好只在性能无关紧要的地方使用它们。</p><p>如果非要使用，对于 tag 属性而言，最好使用 CompareTag 方法。这是 GameObject 提供的比较方法，它可以避免跨越本机-托管的桥接。</p><blockquote><p>直接使用字符串 比较 tag 属性 1000w 次需要 2000ms，并需要 400ms 进行垃圾回收，总共是 2400ms。</p><p>使用 CompareTag 比较 1000w 次仅需要 1000ms，并且不需要进行垃圾回收。</p><p>Tip：向 CompareTag 传递字符串文本时不会导致运行时的内存分配，因为硬编码的字符串将在应用程序初始化时被分配，运行时只是引用它们。</p></blockquote><h2 id="避免在运行时修改-Transform-的父节点"><a href="#避免在运行时修改-Transform-的父节点" class="headerlink" title="避免在运行时修改 Transform 的父节点"></a>避免在运行时修改 Transform 的父节点</h2><p>Unity中，共享父元素的 Transform  按顺序存储在预先分配的内存缓冲区的内存中，并在 Hierarchy 窗口中根据父元素下面的深度进行排序。</p><p>这种数据结构允许在整个组中进行更快的迭代，这对于物理和动画等多个子系统非常有用。</p><p>但是缺点是，如果将一个 GameObject 的父对象指定为另一个对象，父对象必须将新的子对象放入预先分配的内存缓冲区中，并根据新的深度对所有这些 Transform 进行排序。如果缓冲区没有足够的空间，还必须扩展缓冲区，以便以深度优先的顺序容纳新的子对象及其所有的子对象。如果 GameObject 的结构比较复杂，那么该操作需要耗费一些时间来完成。</p><p>当然，也可以提前给 Transform 分配一个更大的缓冲区，这样就可以避免在运行时扩展缓冲区，减少不必要的内存分配。</p><h2 id="避免在运行时使用-Find-和-SendMessage-方法"><a href="#避免在运行时使用-Find-和-SendMessage-方法" class="headerlink" title="避免在运行时使用 Find 和 SendMessage 方法"></a>避免在运行时使用 Find 和 SendMessage 方法</h2><p>GameObject.Find 方法和 SendMessage 方法的开销非常大，应该不惜一切代价避免在运行时使用。</p><h2 id="禁用未使用的脚本和对象"><a href="#禁用未使用的脚本和对象" class="headerlink" title="禁用未使用的脚本和对象"></a>禁用未使用的脚本和对象</h2><p>在构建大型的、开放的游戏时，如果每个游戏对象的脚本都要实时被调用，那么对性能造成的影响将是毁灭性的。许多的游戏对象都在玩家的视野之外，对于玩家的游玩没有任何的影响，反而会拖累游戏性能，因此在不需要的时候，暂时将它们关掉或许是更好的选择。</p><p><strong>通过可见性禁用对象</strong></p><p>为游戏对象的脚本上添加 OnBecameVisible 和 OnBecameInvisible 的回调。</p><blockquote><p> Note: 可见性回调必须与渲染管线通信，因此 GameObject 必须附加一个可渲染的组件，也必须保证希望接受可见性回调的组件也与可渲染对象连接在同一个 GameObject 上。</p></blockquote><p><strong>通过距离禁用对象</strong></p><p>简单的实现是使用一个协程定期检查 玩家与当前游戏物体的距离。</p><h2 id="使用距离的平方而不是距离"><a href="#使用距离的平方而不是距离" class="headerlink" title="使用距离的平方而不是距离"></a>使用距离的平方而不是距离</h2><p>CPU 比较擅长浮点数相乘而不擅长计算平方根，而每次使用 <code>magnitude</code> 属性或者 <code>Distance</code> 方法要求 Vector3 计算距离时，其实都是在进行平方根运算，这会消耗大量的 CPU 资源。</p><p>更好的方案是使用距离的平方来判断游戏对象之间的距离，Vector3 也提供了 <code>sqrMagnitude</code> 属性，该值便是距离的平方。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用距离</span></span><br><span class="line"><span class="built_in">float</span> distance = (transform.position - other.tranform.position).Distance();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (distance &lt; targetDistance)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用距离的平方</span></span><br><span class="line"><span class="built_in">float</span> distance = (transform.position - other.tranform.position).sqrMagnitude;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (distance &lt; (targetDistance * targetDistance))</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Note:</p><p>两个方法的结果几乎相同，只是由于浮点数本身的特性，可能会损失小数点很多位之后的一点点精度。当我们不需要如此精确的精度时，损失一点点的精度换取更高的性能是可以接受的。</p></blockquote><h2 id="平衡CPU使用率"><a href="#平衡CPU使用率" class="headerlink" title="平衡CPU使用率"></a>平衡CPU使用率</h2><p>当有许多的 Monobehaviour 脚本在开始场景一起被初始化，一起启动了协程，每隔 500ms 处理一次 AI 任务时，它们极有可能在同一帧触发，导致 CPU 的使用率在一段时间内出现一个巨大的峰值。</p><p>解决方案有如下三种：</p><ol><li>每次计时器过期或协程触发时，生成一个随机的等待时间</li><li>将协程的初始化分散到各个帧中，这样每帧中只会启动少量的协程初始化</li><li>将调用更新的职责传递给某个 God 类，该类对每帧的调用数量进行限制</li></ol><p>当然，需要警惕的是，剧烈的设计变更可能带来许多危险和意想不到的副作用。</p><h2 id="重写-Update"><a href="#重写-Update" class="headerlink" title="重写 Update"></a>重写 Update</h2><p>优化的一个好的方法是根本不使用 Update，或者更准确地说，只使用一次。</p><p>当 Unity 调用如 Update 的函数回调时，它都要经过跨越本机-托管的桥接，这会造成一定的性能损耗，如果场景中的游戏对象较多，那么耗费在这个过程中的损耗将是一个相当惊人的数字。执行一千个单独的 Update 回调的成本比执行一个 Update 的回调调用一千个常规方法的成本高。</p><p>因此，让一个 God 类的 Monobehaviour 使用它自己的 Update 回调来调用自定义组件使用的自定义更新样式来更新系统，可以最小化 Update 需要跨越桥接的频率。</p>]]></content>
      
      
      <categories>
          
          <category> game development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> performance </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nova 源码解析</title>
      <link href="/2024/06/09/nova_source_code/"/>
      <url>/2024/06/09/nova_source_code/</url>
      
        <content type="html"><![CDATA[<p>以下是 Nova 框架的代码统计。</p><table><thead><tr><th align="left">Path</th><th align="right">Code</th></tr></thead><tbody><tr><td align="left">Assets\Nova</td><td align="right">24267</td></tr><tr><td align="left">Assets\Nova\CGInc</td><td align="right">462</td></tr><tr><td align="left">Assets\Nova\Lua</td><td align="right">2889</td></tr><tr><td align="left">Assets\Nova\Sources\Core\Animation</td><td align="right">1619</td></tr><tr><td align="left">Assets\Nova\Sources\Core\Collections</td><td align="right">604</td></tr><tr><td align="left">Assets\Nova\Sources\Core\Input</td><td align="right">443</td></tr><tr><td align="left">Assets\Nova\Sources\Core\Restoration</td><td align="right">2328</td></tr><tr><td align="left">Assets\Nova\Sources\Core\ScriptParsing</td><td align="right">2902</td></tr><tr><td align="left">Assets\Nova\Sources\Core\VFX</td><td align="right">728</td></tr><tr><td align="left">Assets\Nova\Sources\Exceptions</td><td align="right">39</td></tr><tr><td align="left">Assets\Nova\Sources\Scripts\Controllers</td><td align="right">1813</td></tr><tr><td align="left">Assets\Nova\Sources\Scripts\Graphics</td><td align="right">1307</td></tr><tr><td align="left">Assets\Nova\Sources\Scripts\UI\ButtonRing</td><td align="right">379</td></tr><tr><td align="left">Assets\Nova\Sources\Scripts\UI\Config</td><td align="right">905</td></tr><tr><td align="left">Assets\Nova\Sources\Scripts\UI\Dialogue</td><td align="right">1020</td></tr><tr><td align="left">Assets\Nova\Sources\Scripts\UI\I18n</td><td align="right">279</td></tr><tr><td align="left">Assets\Nova\Sources\Scripts\UI\ImageGallery</td><td align="right">233</td></tr><tr><td align="left">Assets\Nova\Sources\Scripts\UI\InputMapping</td><td align="right">882</td></tr><tr><td align="left">Assets\Nova\Sources\Scripts\UI\MusicGallery</td><td align="right">830</td></tr><tr><td align="left">Assets\Nova\Sources\Scripts\UI\Transition</td><td align="right">555</td></tr><tr><td align="left">Assets\Nova\Sources\Scripts\UI\Views</td><td align="right">3821</td></tr><tr><td align="left">Assets\Nova\UI\Shaders</td><td align="right">229</td></tr></tbody></table><h2 id="Lua-with-Nova"><a href="#Lua-with-Nova" class="headerlink" title="Lua with Nova"></a>Lua with Nova</h2><blockquote><p>功能：lua 调用 Nova 框架组件</p><p>路径：</p><p><code>Nova/Sources/Core/LuaRuntime</code></p><p><code>Nova/Lua</code></p><p>行数：3000</p></blockquote><p>Nova 使用 Lua 作为剧本的脚本语言，通过让程序在运行时解释执行插入到剧本中的 lua 代码实现复杂的演出效果。</p><p>Lua 通过 ToLua 框架调用 Nova 框架提供的方法，从而实现对 GameObject 的控制。</p><p>为了让 Lua 能够正确调用方法，Nova 会给部分组件提供 <code>Lua Global Name</code>（例如 <code>SpriteController</code> ），这样便可以直接在 lua 中使用。</p><p>Nova 的组件绑定到 lua 运行时使用的是 <code>LuaRuntime.Instance.BindObject</code> 方法，代码如下所示。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file: SpriteController.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> luaGlobalName;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    gameState = Utils.FindNovaController().GameState;</span><br><span class="line">    spriteRenderer = GetComponentInChildren&lt;SpriteRenderer&gt;();</span><br><span class="line">    image = GetComponentInChildren&lt;Image&gt;();</span><br><span class="line">    <span class="keyword">if</span> (image != <span class="literal">null</span> &amp;&amp; image.sprite == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Using an empty png is not working due to unknown reason..</span></span><br><span class="line">        image.sprite = Utils.Texture2DToSprite(Utils.ClearTexture);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.RuntimeAssert(spriteRenderer != <span class="literal">null</span> || image != <span class="literal">null</span>, <span class="string">&quot;Missing SpriteRenderer or Image.&quot;</span>);</span><br><span class="line">    defaultSprite = sprite;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(luaGlobalName))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// lua Global Name 在这里进行了绑定</span></span><br><span class="line">        LuaRuntime.Instance.BindObject(luaGlobalName, <span class="keyword">this</span>, <span class="string">&quot;_G&quot;</span>);</span><br><span class="line">        gameState.AddRestorable(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    I18n.LocaleChanged.AddListener(OnLocaleChanged);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LuaRuntime"><a href="#LuaRuntime" class="headerlink" title="LuaRuntime"></a>LuaRuntime</h3><p>LuaRuntime 在 Nova 中负责与 ToLua 进行沟通，Nova 中的各个组件通过 LuaRuntime 调用 lua 部分代码。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 提供 Lua 运行时的单例</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LuaRuntime</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> LuaState lua;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Dictionary&lt;<span class="built_in">string</span>, LuaFunction&gt; cachedLuaFunctions =</span><br><span class="line">        <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, LuaFunction&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> inited;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Init</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Reset</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ClearCachedLuaFunctions();</span><br><span class="line">        lua.DoFile(<span class="string">&quot;requires.lua&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CheckInit</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.RuntimeAssert(inited, <span class="string">&quot;LuaRuntime methods should be called after Init.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 在 Lua 中使对象可见</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 该对象将被分配为全局变量 __Nova 或其他命名空间的一个条目、</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Lua 脚本可以通过 __Nova[name] 访问该对象。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BindObject</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">object</span> obj, <span class="built_in">string</span> tableName = <span class="string">&quot;__Nova&quot;</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdateExecutionContext</span>(<span class="params">ExecutionContext executionContext</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        BindObject(<span class="string">&quot;executionContext&quot;</span>, executionContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 用闭包封装给定代码</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> LuaFunction 将被缓存，并在 Dispose 中被销毁</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LuaFunction <span class="title">WrapClosure</span>(<span class="params"><span class="built_in">string</span> code</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoString</span>(<span class="params"><span class="built_in">string</span> chunk</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CheckInit();</span><br><span class="line">        lua.DoString(chunk);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The LuaTable will not be cached, and the user needs to dispose it</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LuaTable <span class="title">GetTable</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The LuaFunction will be cached, and will be disposed in Dispose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LuaFunction <span class="title">GetFunction</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ClearCachedLuaFunctions</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 处置 Lua 运行时环境</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> LuaRuntime 被销毁时将调用此方法</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Singleton pattern</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Codes from http://wiki.unity3d.com/index.php/Singleton</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LuaRuntime _instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> Lock = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LuaRuntime Instance</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">bool</span> ApplicationIsQuitting = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 当 Unity 退出时，它会以随机顺序销毁对象。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 原则上，只有当应用程序退出时才会销毁单例。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 如果任何脚本在 Instance 销毁后调用它、</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 它将创建一个有缺陷的幽灵对象，该对象将保留在编辑器场景中。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 甚至在停止播放应用程序后也是如此。非常糟糕！</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 因此，这样做是为了确保我们不会创建一个有问题的幽灵对象。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDestroy</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ApplicationIsQuitting = <span class="literal">true</span>;</span><br><span class="line">        Dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>graphics.lua</code> 脚本中可以看到 Nova 是如何控制图像的显示的。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- usage:</span></span><br><span class="line"><span class="comment">---     show(obj, &#x27;image_name&#x27;, [&#123;x, y, [scale, z, angle]&#125;, &#123;r, g, b, [a]&#125;, fade])</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(obj, image_name, coord, color, fade)</span></span></span><br><span class="line">    <span class="comment">--- .....</span></span><br><span class="line">    <span class="keyword">local</span> _type = obj:GetType()</span><br><span class="line">    <span class="keyword">if</span> _type == typeof(Nova.PrefabLoader) <span class="keyword">then</span></span><br><span class="line">        obj:SetPrefab(image_name)</span><br><span class="line">    <span class="keyword">elseif</span> _type == typeof(Nova.SpriteController) <span class="keyword">then</span></span><br><span class="line">        obj:SetImage(image_name)</span><br><span class="line">        __Nova.imageUnlockHelper:Unlock(obj.imageFolder .. <span class="string">&#x27;/&#x27;</span> .. image_name)</span><br><span class="line">    <span class="comment">--- ......</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="剧本解析器"><a href="#剧本解析器" class="headerlink" title="剧本解析器"></a>剧本解析器</h2><blockquote><p>功能：剧本解析</p><p>路径：<code>Assets\Nova\Sources\Core\ScriptParsing</code></p><p>行数：2902</p></blockquote><h3 id="Parser"><a href="#Parser" class="headerlink" title="Parser"></a>Parser</h3><p>Parser首先会创建一个Tokenizer对象负责解析剧本文件的标识符，再根据标识符将剧本文件分为若干块，如提前代码块（EagerCodeBlock）、代码块（CodeBlock）、文本块（TextBlock）、分隔块（SeparatorBlock）。</p><p>解析好的块被称为ParsedScript，在游戏运行时被交给 <code>ScriptLoader</code> 进行执行。</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph TD;Start --&gt; ParseBlockParseBlock --&gt; ParseEagerExectionBlockParseBlock --&gt; ParseCodeBlockParseBlock --&gt; ParseCodeBlockWithAttributesParseBlock --&gt; CheckTokenTypeCheckTokenType --&gt;|WhiteSpace| WhiteSpaceCheckTokenType --&gt;|NewLine or EOF| NewLineOREOF[&quot;NewLine or EOF&quot;]CheckTokenType --&gt;|Not Whitespace or NewLine or EOF| ParseTextBlockWhiteSpace --&gt; CheckTokenTypeNewLineOREOF --&gt; AddToBlocksParseTextBlock --&gt; AddToBlocksParseEagerExectionBlock --&gt; ParseCodeBlockParseCodeBlockWithAttributes --&gt; ParseCodeBlockParseCodeBlock --&gt; AddToBlocks[&quot;Add To Blocks&quot;]AddToBlocks --&gt; ReturnParsedScript[&quot;Return ParsedScript&quot;]  </pre></div><h3 id="FlowChartGraph"><a href="#FlowChartGraph" class="headerlink" title="FlowChartGraph"></a>FlowChartGraph</h3><p>在游戏启动时，ScriptLoader 将加载并解析剧情脚本以构建 FlowChartGraph，每一个 FlowChartGraph 由多个 FlowChartNode 构成，每一个 FlowChartNode 又包含有多个 DialogueEntry，当玩家点击下一步时，其实实际上就是在不断地向前加载 DialogueEntry。</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TDFlowChartGraph --&gt; Node1FlowChartGraph --&gt; Node2FlowChartGraph --&gt; Node3Node1 --&gt; Entry1Node1 --&gt; Entry2Node1 --&gt; Entry3Node2 --&gt; Entry4Node2 --&gt; Entry5Node2 --&gt; Entry6Node3 --&gt; Entry7Node3 --&gt; Entry8Node3 --&gt; Entry9  </pre></div><h2 id="GameState"><a href="#GameState" class="headerlink" title="GameState"></a>GameState</h2><blockquote><p>作用：管理游戏状态</p><p>路径：Nova&#x2F;Source&#x2F;Core&#x2F;GameState</p><p>行数：1212</p></blockquote><p>GameState 类的作用是管理游戏的状态，主要功能如下：</p><ol><li>管理游戏中所有可恢复组件</li><li>管理游戏的状态</li><li>推进游戏剧本</li><li>存储和加载存档</li></ol><h3 id="游戏状态与-GameStateCheckpoint"><a href="#游戏状态与-GameStateCheckpoint" class="headerlink" title="游戏状态与 GameStateCheckpoint"></a>游戏状态与 GameStateCheckpoint</h3><p>游戏状态由当前剧本的行号、当前各可恢复组件的状态、当前游戏所存储的变量以及步骤限制检查点组成。</p><blockquote><p>之所以需要步骤限制检查点，是为了避免读档在某些难以恢复的时刻，从而导致奇怪的难以追溯的错误。</p><p>举例来说，若存档的位置在某次动画演出的途中，那么存档的数据就很难被简单的复原。因此为了读档后演出能够正常进行，就需要将读档的实际位置回溯到动画过场之前。</p><p>步骤限制检查点所提供的就是动画过场之前的演出脚本的行号。</p></blockquote><p>将这些决定了游戏状态的数据打包在一起，就构成了一个 GameStateCheckpoint。</p><p>每一个 GameStateCheckpoint 都记录了当前剧本的行号、当前各可恢复组件的状态、当前游戏所存储的变量以及步骤限制检查点。以下是 GameStateCheckpoint 的实现。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GameStateCheckpoint</span> : <span class="title">ISerializedData</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> dialogueIndex;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="built_in">int</span> stepsCheckpointRestrained;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> Dictionary&lt;<span class="built_in">string</span>, IRestoreData&gt; restoreDatas;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> Variables variables;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GameStateCheckpoint</span>(<span class="params"><span class="built_in">int</span> dialogueIndex, Dictionary&lt;<span class="built_in">string</span>, IRestoreData&gt; restoreDatas,</span></span></span><br><span class="line"><span class="params"><span class="function">        Variables variables, <span class="built_in">int</span> stepsCheckpointRestrained</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.dialogueIndex = dialogueIndex;</span><br><span class="line">        <span class="keyword">this</span>.stepsCheckpointRestrained = stepsCheckpointRestrained;</span><br><span class="line">        <span class="keyword">this</span>.restoreDatas = restoreDatas;</span><br><span class="line">        <span class="keyword">this</span>.variables = <span class="keyword">new</span> Variables();</span><br><span class="line">        <span class="keyword">this</span>.variables.CloneFrom(variables);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是 GameState 创建和恢复 GameStateCheckpoint 的方法。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file: GameState.cs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Get the current game state as a checkpoint</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> GameStateCheckpoint <span class="title">GetCheckpoint</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> restoreDatas = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, IRestoreData&gt;();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> restorable <span class="keyword">in</span> restorables)</span><br><span class="line">    &#123;</span><br><span class="line">        restoreDatas[restorable.Key] = restorable.Value.GetRestoreData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> GameStateCheckpoint(currentIndex, restoreDatas, variables, stepsCheckpointRestrained);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RestoreCheckpoint</span>(<span class="params">GameStateCheckpoint entry</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.RuntimeAssert(entry != <span class="literal">null</span>, <span class="string">&quot;Checkpoint is null.&quot;</span>);</span><br><span class="line">    restoreStarts.Invoke(entry == initialCheckpoint);</span><br><span class="line"></span><br><span class="line">    currentIndex = entry.dialogueIndex;</span><br><span class="line">    stepsFromLastCheckpoint = <span class="number">0</span>;</span><br><span class="line">    stepsCheckpointRestrained = entry.stepsCheckpointRestrained;</span><br><span class="line">    checkpointEnsured = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    variables.CloneFrom(entry.variables);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> pairs = restorables.OrderByDescending(x =&gt;</span><br><span class="line">        (x.Value <span class="keyword">as</span> IPrioritizedRestorable)?.priority ?? RestorablePriority.Normal);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> pair <span class="keyword">in</span> pairs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (entry.restoreDatas.TryGetValue(pair.Key, <span class="keyword">out</span> <span class="keyword">var</span> data))</span><br><span class="line">        &#123;</span><br><span class="line">            pair.Value.Restore(data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// fallback to initialCheckpoint state</span></span><br><span class="line">            pair.Value.Restore(initialCheckpoint.restoreDatas[pair.Key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GameState-如何推进进度"><a href="#GameState-如何推进进度" class="headerlink" title="GameState 如何推进进度"></a>GameState 如何推进进度</h3><p>游戏状态的推进同样是由 GameState 进行管理的，由 <code>Step()</code> 方法进行控制。</p><p>若当前剧本没有到达末尾，则继续向前推进。若到达了末尾，则使用 <code>StepAtEndOfNode()</code> 方法判断该如何处理。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Step</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!canStepForward)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the next dialogue entry is in the current node, directly step to it</span></span><br><span class="line">    <span class="keyword">if</span> (currentIndex + <span class="number">1</span> &lt; currentNode.dialogueEntryCount)</span><br><span class="line">    &#123;</span><br><span class="line">        ++currentIndex;</span><br><span class="line">        UpdateGameState(<span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        StepAtEndOfNode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用了 <code>Step()</code> 方法确定向前推进游戏状态后，<code>UpdateGameState()</code> 方法负责实际更新游戏状态。</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph TDStep --&gt; UpdateGameState --&gt; UpdateDialogueUpdateDialogue --&gt; ExecuteAction.BeforeCheckpointUpdateDialogue --&gt; ExecuteAction.DefaultUpdateDialogue --&gt; ExecuteAction.AfterDialogue  </pre></div><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateGameState</span>(<span class="params"><span class="built_in">bool</span> fromCheckpoint, <span class="built_in">bool</span> nodeChanged</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (nodeChanged)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Debug.Log($&quot;Node changed to &#123;currentNode.name&#125;&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.nodeChanged.Invoke(<span class="keyword">new</span> NodeChangedData(nodeRecord.name));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Always get a checkpoint at the beginning of the node</span></span><br><span class="line">        checkpointEnsured = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentNode.dialogueEntryCount &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        currentDialogueEntry = currentNode.GetDialogueEntryAt(currentIndex);</span><br><span class="line">        ExecuteAction(UpdateDialogue(fromCheckpoint, nodeChanged));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        StepAtEndOfNode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> IEnumerator <span class="title">UpdateDialogue</span>(<span class="params"><span class="built_in">bool</span> fromCheckpoint, <span class="built_in">bool</span> nodeChanged</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!fromCheckpoint)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果将下面几行代码放入一个新的例行程序将引入一帧的延迟，所以不要这样做</span></span><br><span class="line">        currentDialogueEntry.ExecuteAction(DialogueActionStage.BeforeCheckpoint, isRestoring);</span><br><span class="line">        <span class="keyword">while</span> (actionPauseLock.isLocked) <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> isReached = currentIndex &lt; nodeRecord.endDialogue;</span><br><span class="line">    DialogueSaveCheckpoint(nodeChanged, isReached);</span><br><span class="line">    <span class="comment">// 通知对话即将更改。例如角色控制器就会停止播放语音</span></span><br><span class="line">    dialogueWillChange.Invoke();</span><br><span class="line"></span><br><span class="line">    currentDialogueEntry.ExecuteAction(DialogueActionStage.Default, isRestoring);</span><br><span class="line">    <span class="keyword">while</span> (actionPauseLock.isLocked) <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> isReachedAnyHistory = checkpointManager.IsReachedAnyHistory(currentNode.name, currentIndex);</span><br><span class="line">    <span class="keyword">var</span> dialogueData = DialogueSaveReachedData(isReachedAnyHistory);</span><br><span class="line">    <span class="keyword">var</span> dialogueChangedData = <span class="keyword">new</span> DialogueChangedData(nodeRecord, checkpointOffset, dialogueData,</span><br><span class="line">        currentDialogueEntry.GetDisplayData(), isReached, isReachedAnyHistory);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isJumping &amp;&amp; !isReachedAnyHistory)</span><br><span class="line">    &#123;</span><br><span class="line">        isJumping = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通知对话已经发生了变化</span></span><br><span class="line">    dialogueChangedEarly.Invoke(dialogueChangedData);</span><br><span class="line">    dialogueChanged.Invoke(dialogueChangedData);</span><br><span class="line"></span><br><span class="line">    currentDialogueEntry.ExecuteAction(DialogueActionStage.AfterDialogue, isRestoring);</span><br><span class="line">    <span class="keyword">while</span> (actionPauseLock.isLocked) <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NodeRecord"><a href="#NodeRecord" class="headerlink" title="NodeRecord"></a>NodeRecord</h2><p>游戏的状态恢复可以使用 GameStateCheckpoint 实现，但如果需要实现更多的效果，例如了解玩家经过了哪些剧本节点、哪些结局达成了等需求，就很难实现了。</p><p>单一的 GameStateCheckpoint 无法提供更多的信息，因此我们需要一个数据结构来专门存储玩家经过了哪些节点，这个数据结构就是 NodeRecord。</p><p>所有的 NodeRecord 将组成一棵树，可以完整描述玩家的剧情流程。</p><h3 id="什么时候会创建-NodeRecord"><a href="#什么时候会创建-NodeRecord" class="headerlink" title="什么时候会创建 NodeRecord"></a>什么时候会创建 NodeRecord</h3><p>每隔若干条对话，Nova 框架就会自动创建一个 NodeRecord，覆盖一个流程图节点内的若干条对话，并保存一个对话内生成的 GameStateCheckpoint 的索引。</p><p>每一个 NodeRecord 的第一条对话会强制创建一个 GameStateCheckpoint，但 NodeRecord 的结尾不强制创建。</p><p>当进行剧情分支跳转的时候，会创建 NodeRecord（如果跳转到同一个节点，即使是不同的分支，也不会创建新的NodeRecord）。</p><p>同一个节点内也可能会产生多个NodeRecord，目前有两种情况：</p><ol><li>一条对话的脚本可能在相同的初始状态下产生不同的结果，比如小游戏。这时根据不同的 variablesHash 创建不同的 NodeRecord</li><li>当前 NodeRecord 所覆盖的 GameStateCheckpoint 范围不处于链表末尾，但是需要添加新的 GameStateCheckpoint</li></ol><p>这两种情况都会调用 <code>GameState.AppendSameNode</code> 方法增加一个新的 NodeRecord 的子节点。</p><h2 id="存档系统"><a href="#存档系统" class="headerlink" title="存档系统"></a>存档系统</h2><p>如果要实现一个游戏的存档和读档的功能，前提条件是能够将游戏的状态进行序列化和反序列化。</p><p>Nova 的做法是为游戏中每一个会随着游戏进度变化的组件增加了序列化和反序列化接口，使用 json 数据和其他简单数据作为存储状态的媒介。</p><p>存档系统中存储的数据有以下几类:</p><ul><li>GlobalSave：记录当前存档文件的相关信息，例如存档的时间、存档数据的存放位置等。</li><li>游戏的全局变量和局部变量：例如好感度等是局部变量，而几周目、是否通关过某些结局等是全局变量。</li><li>GameState：当前的游戏状态，例如当前在哪条对话、当前游戏前端组件的状态等。</li></ul><p>GlobalSave 和 游戏的变量比较好处理，但是序列化与反序列化 GameState 比较困难，尤其是当需要考虑存读档系统的性能问题时。</p><h3 id="可恢复组件"><a href="#可恢复组件" class="headerlink" title="可恢复组件"></a>可恢复组件</h3><p>为了解决序列化和反序列化的问题，Nova 引入了 <code>IRestoreData</code> 和 <code>IRestorable</code> 两个接口，分别用于可恢复数据与可恢复组件。通过 <code>IRestoreData</code> 与 <code>IRestorable</code> 相互配合，我们就可以将游戏状态恢复到任意的时刻。</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  classDiagramclass ISerializedData {&lt;&lt;interface&gt;&gt;}class IRestoreData {&lt;&lt;interface&gt;&gt;}IRestoreData --&gt; ISerializedDataAutoVoiceRestoreData --&gt; IRestoreDataAudioControllerRestoreData --&gt; IRestoreDataLogControllerRestoreData --&gt; IRestoreData  </pre></div><center>IRestoreData 类图</center><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  classDiagramclass IRestorable {&lt;&lt;interface&gt;&gt;- string restorableName- GetRestoreData() IRestoreData- Restore(IRestoreData restoreData) void}AutoVoice --&gt; IRestorableAudioController --&gt; IRestorableCameraController --&gt; IRestorableMeshController --&gt; IRestorable  </pre></div><center>IRestorable 类图</center><p>单一组件的数据恢复问题解决了，接下来就需要解决如何让所有需要存档的组件统一存档。</p><p>计算机领域有一句戏言：”All problems in computer science can be solved by another level of indirection。”（计算机科学中的每个问题都可以用一间接层解决）。</p><p>在面对这种让数据统一进行某种操作时，我们的第一反应是将这些数据放在某处进行集中管理，事实上 Nova 也是如此做的，这个管理游戏所有数据的层级就是 GameState。</p><p>在场景初始化的时候，可恢复组件会将自身注册进 <code>GameState.restorables</code>，具体实现可以参考 AutoVoice 的例子。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file: GameState.cs</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> Dictionary&lt;<span class="built_in">string</span>, IRestorable&gt; restorables =</span><br><span class="line">    <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, IRestorable&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddRestorable</span>(<span class="params">IRestorable restorable</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        restorables.Add(restorable.restorableName, restorable);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ArgumentException e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(</span><br><span class="line">            <span class="string">&quot;Nova: A restorable should have an unique and non-null name.&quot;</span>, e</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveRestorable</span>(<span class="params">IRestorable restorable</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    restorables.Remove(restorable.restorableName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// file: AutoVoice.cs</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    gameState = Utils.FindNovaController().GameState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> config <span class="keyword">in</span> autoVoiceConfigs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> name = config.characterName;</span><br><span class="line">        nameToConfig[name] = config;</span><br><span class="line">        nameToEnabled[name] = <span class="literal">false</span>;</span><br><span class="line">        nameToIndex[name] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(luaName))</span><br><span class="line">    &#123;</span><br><span class="line">        LuaRuntime.Instance.BindObject(luaName, <span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 将自身添加进 restorables 中</span></span><br><span class="line">        gameState.AddRestorable(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nova 自带有十六个的可恢复组件，如下所示。</p><ol><li>AssetLoader：用于在运行时加载资产并管理预加载的资产</li><li>PostProcessing：用于进行后处理</li><li>AutoVoice：用于管理游戏中角色的自动语音播放配置</li><li>AudioController：用于控制游戏中的音频播放</li><li>AvatarController：用于控制角色的头像渲染</li><li>CameraController：用于控制角色摄像机</li><li>MeshController：用于控制MeshRender组件</li><li>PrefabLoader：用于动态加载和管理游戏对象预制件</li><li>RawImageController：用于控制原始图像组件</li><li>SpriteController：用于控制图像组件</li><li>VideoController：用于控制视频播放</li><li>OverlaySpriteController：用于覆盖其他图层显示图像，GameCharacterController 继承并拓展了该组件</li><li>GameViewInput：用于管理视觉小说游戏中用户输入</li><li>DialogueBoxController：用于控制文本框组件</li><li>GameViewController：用于管理游戏中的 UI</li><li>LogController：用于显示剧本对话记录</li></ol><h3 id="GameStateCheckpoint-与-CheckpointBlock"><a href="#GameStateCheckpoint-与-CheckpointBlock" class="headerlink" title="GameStateCheckpoint 与 CheckpointBlock"></a>GameStateCheckpoint 与 CheckpointBlock</h3><p>在 GameState 章节中我们知道了游戏是通过保存和恢复 GameStateCheckpoint 实现的存档与读档，而这一小结，我们需要去了解 GameStateCheckpoint 是如何被存储到硬盘上，又是如何从硬盘中读取出来。</p><h4 id="CheckpointBlock-与-Record"><a href="#CheckpointBlock-与-Record" class="headerlink" title="CheckpointBlock 与 Record"></a>CheckpointBlock 与 Record</h4><p>查找文件数据有两种方式，一种方式是当需要某个数据时，将该数据全部读入内存中进行查找，这样是最简单的方式，但在数据量很大的情况下，将数据读入，再将数据反写回硬盘会消耗大量的时间。</p><p>另一种方式是提前算出数据存放的位置，然后只读取该数据的所在位置。这样做的速度是最快的，但需要提前规划好数据的存储方式。</p><p>Nova 所采取的就是第二种方式，框架将存档中的数据分为若干个小块，每一个小块的大小为 4KB，这个小块就被称为 CheckpointBlock（GameStateCheckpoint 与 CheckpointBlock 是两个东西，注意区分）。</p><p>但是只有 CheckpointBlock 对存档进行分块还是不够，我们还需要提供将数据合理写入存档的方法。</p><p>Nova 框架中，提供数据写入与读取功能的脚本叫作 <code>CheckpointSerializer.cs</code>，它提供了 <code>AppendRecord</code> 方法将数据写入到存档最末尾的 CheckpointBlock 中。</p><p>需要注意的是，不存在名叫 Record 的数据结构，只是在习惯上，我们将不定长的数据称为 Record，这与我们之后将要提到的 NodeRecord 并不是同一个事物。</p><p>以下是Nova的存档文件的数据分布示意图。</p><p><img src="/./assets/global.nsav-phy.svg" alt="global.nsav-phy"></p><center>global.nsav 存档示意图</center><p>第一个CheckpointBlock 开头的 <code>header</code>, 用于标示该文件是 Nova 框架的存档文件，<code>version</code> 则标示该存档文件的版本号，<code>id</code> 存储当前处于哪一个 CheckpointBlock，通过它我们就可以很轻松的获得特定的 CheckpointBlock 。</p><p>例如当我们需要读取第六块 CheckpointBlock 的数据时，只需要将 id 序号与 CheckpointBlock 的大小相乘就可以得出数据的偏移量，然后读取该偏移量之后的一个 CheckpointBlock 大小的数据即可。</p><p>每次写入一条 Record，该 Record 都会在开头放置一个 int 类型的数据提示自己占据多少个字节，然后将数据放入之后的区域。当读取存档的时候，即可通过该特性来读取特定的 Record。</p><p>如果一个 Rcord 的数据没有办法被当前的 CheckpointBlock 完整的存储，如 Record F 所示，那么存档系统会自动扩充一个新的 CheckpointBlock，让 Record 存储完剩下的数据。而在读取的时候，存档系统也会自动判断当前 Record 的数据是否被全部读出，如果当前 CheckpointBlock 中已经没有数据了，那么存档系统将自动去下一个 CheckpointBlock 中读取剩余的数据。</p><h2 id="演出控制"><a href="#演出控制" class="headerlink" title="演出控制"></a>演出控制</h2><p>Nova通过GameViewInput获取玩家的输入，然后顺序调用一系列管理器，最终更新界面显示。</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LRsubgraph &quot;InputCheck&quot;ClickForward(&quot;GameViewInput.ClickForward()&quot;)--&gt; GameViewController.Step(&quot;GameViewController.Step()&quot;)endInputCheck --&gt; GameStatesubgraph &quot;GameState&quot;    direction TBGameState.Step(&quot;GameState.Step()&quot;)--&gt; GameState.UpdateGameState(&quot;GameState.UpdateGameState()&quot;)--&gt; GameState.ExecuteAction(&quot;GameState.ExecuteAction()&quot;)--&gt; UpdateDialogue(&quot;GameState.UpdateDialogue()&quot;)endGameState --&gt; DialogueEntrysubgraph &quot;DialogueEntry&quot;direction TBDialogueEntry.ExecuteAction(&quot;DialogueEntry.ExecuteAction()&quot;)--&gt; DialogueEntry.action.Call(&quot;DialogueEntry.action.Call()&quot;)end  </pre></div><h3 id="VFX"><a href="#VFX" class="headerlink" title="VFX"></a>VFX</h3><p>Nova的图像特效，例如淡入淡出等，都是通过VFX实现的，以下我们就将对Nova的VFX系统的代码进行分析。</p><h4 id="lua-function-vfx"><a href="#lua-function-vfx" class="headerlink" title="lua function - vfx"></a>lua function - vfx</h4><p>在影视制作中，在真人动作镜头之外创造或操纵图像的过程被称为VFX（Visual effects）。利用影片和电脑生成的图像或影像合成，来创造一个看起来真实的效果或场景。而在视觉小说中，往往是指为图像添加某些视觉效果。</p><p>Nova 作为视觉小说框架自然也提供了一些相关的功能，如果我们要为图像对象添加一些特效，可以使用 <code>vfx</code> 方法，以下是一个简单的示例代码，它会为当前的背景图片添加一个模糊的效果。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">vfx(bg, <span class="string">&#x27;lens_blur&#x27;</span>, <span class="number">1</span>, &#123; _Size = <span class="number">10</span> &#125;)</span><br></pre></td></tr></table></figure><p>我们可以看一看在lua代码中，<code>vfx</code> 是如何实现的。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- usage:</span></span><br><span class="line"><span class="comment">---     vfx(obj, &#x27;shader_name&#x27;, [t, &#123; name = value &#125;])</span></span><br><span class="line"><span class="comment">---     vfx(obj, &#123;&#x27;shader_name&#x27;, layer_id&#125;, [t, &#123; name = value &#125;])</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">vfx</span><span class="params">(obj, shader_layer, t, properties)</span></span></span><br><span class="line">    <span class="keyword">local</span> shader_name, layer_id = parse_shader_layer(shader_layer)</span><br><span class="line"></span><br><span class="line">    <span class="comment">--- 如果 shader_name 存在，调用 get_mat 函数获取材质、基础着色器名称和其他信息。</span></span><br><span class="line">    <span class="comment">--- 如果 shader_name 不存在，调用 get_default_mat 函数获取对象的默认材质，并将其应用到指定层。</span></span><br><span class="line">    <span class="keyword">if</span> shader_name <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> mat, base_shader_name, _ = get_mat(obj, shader_name)</span><br><span class="line">        <span class="comment">-- 如果 t 没有提供，则时间默认为1</span></span><br><span class="line">        <span class="comment">-- 如果 properties 没有提供，则默认为空表。</span></span><br><span class="line">        t = t <span class="keyword">or</span> <span class="number">1</span></span><br><span class="line">        properties = properties <span class="keyword">or</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- 如果 properties 不是 &#x27;cont&#x27;，调用相关方法来设置材质的默认属性和当前属性。</span></span><br><span class="line">        <span class="keyword">if</span> properties ~= <span class="string">&#x27;cont&#x27;</span> <span class="keyword">then</span></span><br><span class="line">            set_mat_default_properties(mat, base_shader_name, properties)</span><br><span class="line">            set_mat_properties(mat, base_shader_name, properties)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">-- 为材质设置其运行时间</span></span><br><span class="line">        mat:SetFloat(<span class="string">&#x27;_T&#x27;</span>, t)</span><br><span class="line">        <span class="comment">-- 将该材质应用到对象的指定层</span></span><br><span class="line">        set_mat(obj, mat, layer_id)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        set_mat(obj, get_default_mat(obj), layer_id)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>通过上面的代码我们可以知道，vfx 的原理就是为需要特效的对象添加一个材质，再通过该材质上的着色器属性来实现视觉效果。</p><p>但是此时我们仍有许多疑问，例如 lua 究竟是如何在代码中为对象添加材质的，而着色器又是如何生效的，如果我们要创建一个自己的着色器，又应该如何做。</p><h4 id="lua-function-get-mat"><a href="#lua-function-get-mat" class="headerlink" title="lua function - get_mat"></a>lua function - get_mat</h4><p>首先我们需要看一下 <code>get_mat</code> 方法，该方法的主要作用是从附加到 <code>GameObject</code> 的 <code>MaterialPool</code> 中获取材质。</p><ol><li>检查 <code>shader_name</code> 是否为 <code>nil</code>，如果是则返回 <code>nil</code>。</li><li>设置 <code>restorable</code> 的默认值为 <code>true</code>。</li><li>获取目标 <code>GameObject</code> 的渲染组件和后处理组件。如果两个组件都不存在，则发出警告并返回 <code>nil</code>。</li><li>获取完整的着色器名称、基础着色器名称和变体。</li><li>确保 <code>GameObject</code> 有一个材质池，并从材质池中获取可恢复或普通材质。</li><li>如果找不到材质，发出警告并返回 <code>nil</code>。如果找到材质，则返回材质、基础着色器名称和变体。</li></ol><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- get material from the MaterialPool attached to the GameObject</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">get_mat</span><span class="params">(obj, shader_name, restorable)</span></span></span><br><span class="line">    <span class="keyword">if</span> shader_name == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> restorable == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">        restorable = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">--- 获取渲染组件</span></span><br><span class="line">    <span class="keyword">local</span> go, renderer, pp = get_renderer_pp(obj)</span><br><span class="line">    <span class="keyword">if</span> renderer == <span class="literal">nil</span> <span class="keyword">and</span> pp == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">        warn(<span class="string">&#x27;Cannot find SpriteRenderer or Image or RawImage or PostProcessing for &#x27;</span> .. <span class="built_in">dump</span>(obj))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">--- 获取完整的着色器名称</span></span><br><span class="line">    <span class="keyword">local</span> full_shader_name, base_shader_name, variant = get_full_shader_name(shader_name, obj, pp)</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 调用 Nova.MaterialPool.Ensure 函数，确保 GameObject 有一个MaterialPool，并返回材质池。</span></span><br><span class="line">    <span class="keyword">local</span> pool = Nova.MaterialPool.Ensure(go)</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 获取材质</span></span><br><span class="line">    <span class="keyword">local</span> mat</span><br><span class="line">    <span class="keyword">if</span> restorable <span class="keyword">then</span></span><br><span class="line">        mat = pool:GetRestorableMaterial(full_shader_name)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        mat = pool:Get(full_shader_name)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> mat == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">        warn(<span class="string">&#x27;Cannot find material: &#x27;</span> .. shader_name)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mat, base_shader_name, variant</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="lua-function-set-mat"><a href="#lua-function-set-mat" class="headerlink" title="lua function - set_mat"></a>lua function - set_mat</h4><p><code>set_mat</code> 用于设置对象的材质（material）。它接受四个参数：obj（目标对象）、mat（材质）、layer_id（层ID，默认值为0）、token（令牌，默认值为-1）。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">set_mat</span><span class="params">(obj, mat, layer_id, token)</span></span></span><br><span class="line">    layer_id = layer_id <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">    token = token <span class="keyword">or</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取目标对象的渲染器（renderer）和后处理组件（pp）</span></span><br><span class="line">    <span class="keyword">local</span> go, renderer, pp = get_renderer_pp(obj)</span><br><span class="line"></span><br><span class="line">    <span class="comment">--- 设置材质给后处理组件</span></span><br><span class="line">    <span class="keyword">if</span> renderer <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> layer_id ~= <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">            warn(<span class="string">&#x27;layer_id should be 0 for SpriteRenderer or Image or RawImage&#x27;</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        renderer.material = mat</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--- 如果存在后处理组件（pp）</span></span><br><span class="line">    <span class="keyword">if</span> pp <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> mat <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">return</span> pp:SetLayer(layer_id, mat)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp:ClearLayer(layer_id, token)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 如果存在 FadeController 组件则提示开发者不能设置 FadeController 的材质</span></span><br><span class="line">    <span class="keyword">local</span> fade = go:GetComponent(typeof(Nova.FadeController))</span><br><span class="line">    <span class="keyword">if</span> fade <span class="keyword">then</span></span><br><span class="line">        warn(<span class="string">&#x27;Cannot set material for FadeController &#x27;</span> .. <span class="built_in">dump</span>(obj))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    warn(<span class="string">&#x27;Cannot find SpriteRenderer or Image or RawImage or PostProcessing for &#x27;</span> .. <span class="built_in">dump</span>(obj))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="lua-function-trans2"><a href="#lua-function-trans2" class="headerlink" title="lua function - trans2"></a>lua function - trans2</h4><p><code>trans2</code> 方法由 action_begin、action_middle、action_end 三部分组成，并最终用动画系统将这三部分组合在一起。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- sprite transition using a shader that hides the texture</span></span><br><span class="line"><span class="comment">--- the shader should implement _MainTex and _T</span></span><br><span class="line"><span class="comment">--- range of _T is (0, 1), _T = 0 shows _MainTex, _T = 1 hides _MainTex</span></span><br><span class="line"><span class="comment">--- usage:</span></span><br><span class="line"><span class="comment">---     trans2(obj, &#x27;image_name&#x27;, &#x27;shader_name&#x27;, [duration, &#123; name = value &#125;, duration2, &#123; name = value &#125;, &#123;r, g, b, [a]&#125;])</span></span><br><span class="line">make_anim_method(<span class="string">&#x27;trans2&#x27;</span>, <span class="function"><span class="keyword">function</span><span class="params">(self, obj, image_name, shader_layer, times, properties, times2, properties2, color2)</span></span></span><br><span class="line">    <span class="keyword">local</span> shader_name, layer_id = parse_shader_layer(shader_layer, cam_trans_layer_id)</span><br><span class="line">    <span class="comment">-- mat is not RestorableMaterial</span></span><br><span class="line">    <span class="keyword">local</span> mat, base_shader_name, _ = get_mat(obj, shader_name, <span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">local</span> duration, easing = parse_times(times)</span><br><span class="line">    properties = properties <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">local</span> duration2, easing2 = parse_times(times2)</span><br><span class="line">    properties2 = properties2 <span class="keyword">or</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> action_begin, action_middle, action_end, token</span><br><span class="line">    <span class="keyword">if</span> obj:GetType() == typeof(Nova.CameraController) <span class="keyword">then</span></span><br><span class="line">        action_begin = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            set_mat_default_properties(mat, base_shader_name, properties)</span><br><span class="line">            set_mat_properties(mat, base_shader_name, properties)</span><br><span class="line">            mat:SetFloat(<span class="string">&#x27;_T&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">            token = set_mat(obj, mat, layer_id)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        action_middle = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            <span class="keyword">if</span> image_name <span class="keyword">then</span></span><br><span class="line">                auto_fade_off()</span><br><span class="line">                <span class="keyword">local</span> func = image_name</span><br><span class="line">                func()</span><br><span class="line">                auto_fade_on()</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            set_mat_properties(mat, properties2)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        action_end = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            set_mat(obj, get_default_mat(obj), layer_id, token)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        action_begin = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            set_mat_default_properties(mat, base_shader_name, properties)</span><br><span class="line">            set_mat_properties(mat, base_shader_name, properties)</span><br><span class="line">            mat:SetFloat(<span class="string">&#x27;_T&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">            token = set_mat(obj, mat)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        action_middle = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            <span class="keyword">if</span> image_name <span class="keyword">then</span></span><br><span class="line">                show_no_fade(obj, image_name, <span class="literal">nil</span>, color2)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            set_mat_properties(mat, properties2)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        action_end = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            set_mat(obj, get_default_mat(obj), <span class="literal">nil</span>, token)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> entry = <span class="built_in">self</span>:action(action_begin</span><br><span class="line">        ):_then(Nova.MaterialFloatAnimationProperty(mat, <span class="string">&#x27;_T&#x27;</span>, <span class="number">1</span>)):_with(easing):_for(duration</span><br><span class="line">        ):action(action_middle</span><br><span class="line">        ):_then(Nova.MaterialFloatAnimationProperty(mat, <span class="string">&#x27;_T&#x27;</span>, <span class="number">0</span>)):_with(easing2):_for(duration2</span><br><span class="line">        ):action(action_end)</span><br><span class="line">    entry.head = <span class="built_in">self</span></span><br><span class="line">    <span class="keyword">return</span> entry</span><br><span class="line"><span class="keyword">end</span>, add_preload_pattern)</span><br></pre></td></tr></table></figure><h4 id="MaterialFactory"><a href="#MaterialFactory" class="headerlink" title="MaterialFactory"></a>MaterialFactory</h4><p>MaterialFactory 用于创建和管理 Unity 中的 <code>Material</code> 对象以及自定义的 <code>RestorableMaterial</code> 对象。lua 代码中的 <code>get_mat</code> 所使用的 <code>Get</code> 方法其实就是调用的该类中的方法。</p><p>其实现原理非常简单，从 Resources 中寻找文件名对应的 Shader，使用该 Shader 创建一个材质，最后返回。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">MaterialFactory</span> : <span class="title">IDisposable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Dictionary&lt;<span class="built_in">string</span>, Material&gt; materials;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Dictionary&lt;<span class="built_in">string</span>, RestorableMaterial&gt; restorableMaterials;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaterialFactory</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        materials = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, Material&gt;();</span><br><span class="line">        restorableMaterials = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, RestorableMaterial&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Material <span class="title">Get</span>(<span class="params"><span class="built_in">string</span> shaderName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (materials.TryGetValue(shaderName, <span class="keyword">out</span> <span class="keyword">var</span> mat)) <span class="keyword">return</span> mat;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> shader = Shader.Find(shaderName);</span><br><span class="line">        <span class="keyword">if</span> (shader == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">$&quot;Nova: Shader not found: <span class="subst">&#123;shaderName&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">        mat = <span class="keyword">new</span> Material(shader)</span><br><span class="line">        &#123;</span><br><span class="line">            name = <span class="built_in">string</span>.Format(<span class="string">&quot;Nova - &#123;0&#125;&quot;</span>,</span><br><span class="line">                shaderName.Substring(shaderName.IndexOf(<span class="string">&quot;/&quot;</span>, StringComparison.Ordinal) + <span class="number">1</span>)),</span><br><span class="line">            hideFlags = HideFlags.DontSave</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        materials.Add(shaderName, mat);</span><br><span class="line">        <span class="keyword">return</span> mat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestorableMaterial <span class="title">GetRestorableMaterial</span>(<span class="params"><span class="built_in">string</span> shaderName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (restorableMaterials.TryGetValue(shaderName, <span class="keyword">out</span> <span class="keyword">var</span> resMat)) <span class="keyword">return</span> resMat;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> shader = Shader.Find(shaderName);</span><br><span class="line">        <span class="keyword">if</span> (shader == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">$&quot;Nova: Shader not found: <span class="subst">&#123;shaderName&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resMat = <span class="keyword">new</span> RestorableMaterial(shader)</span><br><span class="line">        &#123;</span><br><span class="line">            name = <span class="built_in">string</span>.Format(<span class="string">&quot;Nova:Restorable - &#123;0&#125;&quot;</span>,</span><br><span class="line">                shaderName.Substring(shaderName.IndexOf(<span class="string">&quot;/&quot;</span>, StringComparison.Ordinal) + <span class="number">1</span>)),</span><br><span class="line">            hideFlags = HideFlags.DontSave</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        restorableMaterials.Add(shaderName, resMat);</span><br><span class="line">        <span class="keyword">return</span> resMat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> m <span class="keyword">in</span> materials.Values)</span><br><span class="line">        &#123;</span><br><span class="line">            Utils.DestroyObject(m);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        materials.Clear();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> m <span class="keyword">in</span> restorableMaterials.Values)</span><br><span class="line">        &#123;</span><br><span class="line">            Utils.DestroyObject(m);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        restorableMaterials.Clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MaterialPool"><a href="#MaterialPool" class="headerlink" title="MaterialPool"></a>MaterialPool</h4><p>MaterialPool 使用 <code>MaterialFactory</code> 实例来管理材质对象，旨在与 Unity 引擎中的游戏对象一起使用，提供一种简化的材质管理方式。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">ExportCustomType</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MaterialPool</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Keep Renderer&#x27;s default material, used when turning off VFX on the Renderer</span></span><br><span class="line">    <span class="comment">// defaultMaterial is null for PostProcessing</span></span><br><span class="line">    <span class="keyword">private</span> Material _defaultMaterial;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Material defaultMaterial</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> =&gt; _defaultMaterial;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_defaultMaterial == <span class="keyword">value</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Utils.DestroyObject(_defaultMaterial);</span><br><span class="line">            _defaultMaterial = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (TryGetComponent&lt;Renderer&gt;(<span class="keyword">out</span> <span class="keyword">var</span> renderer))</span><br><span class="line">        &#123;</span><br><span class="line">            defaultMaterial = renderer.material;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDestroy</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        defaultMaterial = <span class="literal">null</span>;</span><br><span class="line">        factory.Dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> MaterialFactory factory = <span class="keyword">new</span> MaterialFactory();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Material <span class="title">Get</span>(<span class="params"><span class="built_in">string</span> shaderName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> factory.Get(shaderName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestorableMaterial <span class="title">GetRestorableMaterial</span>(<span class="params"><span class="built_in">string</span> shaderName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> factory.GetRestorableMaterial(shaderName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Export to Lua</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MaterialPool <span class="title">Ensure</span>(<span class="params">GameObject gameObject</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> gameObject.Ensure&lt;MaterialPool&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多语言支持"><a href="#多语言支持" class="headerlink" title="多语言支持"></a>多语言支持</h2><p>Nova 的 I18n 可以分为 UI 的 I18n 与剧本的 I18n，需要分别进行讨论。</p><h3 id="I18n-UI"><a href="#I18n-UI" class="headerlink" title="I18n UI"></a>I18n UI</h3><h4 id="I18nText-I18nImage"><a href="#I18nText-I18nImage" class="headerlink" title="I18nText &amp; I18nImage"></a>I18nText &amp; I18nImage</h4><p>UI组件的I18n支持比较简单，在初始化或者I18n更改事件发生时，通过 <code>inflateKey</code> 读取多语言文件中的对应的 <code>value</code> 并更新显示。</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TDI18nComponentInit(&quot;I18n Component Init&quot;)--&gt;|Get I18n Res with __ function| I18nsubgraph I18nLoadTranslationBundles(&quot;Load I18n Res&quot;)--&gt; GetCurrentLanguage(&quot;Get Current Language&quot;)--&gt; ReturnInflateResources(&quot;Return Inflate Key Res&quot;)endI18n --&gt; UpdateI18nComponent(&quot;I18nXXX.UpdateXXX&quot;)  </pre></div><h3 id="I18n-Scenarios"><a href="#I18n-Scenarios" class="headerlink" title="I18n Scenarios"></a>I18n Scenarios</h3><p>在Nova中，剧本的多语言采用的是逐行对照的方式，当需要加载某个语言的多语言设置时，系统将尝试读取对应语言的对应章节的对应行。</p><h2 id="动画系统"><a href="#动画系统" class="headerlink" title="动画系统"></a>动画系统</h2><p>Nova 的动画组件放在了 NovaController 这个预置体的 NovaAnimation 对象下，分别有一个专门的对象挂载了 NovaAnimation脚本。其中 <code>AnimationType.PerDialogue</code> 和 <code>AnimationType.Holding</code>  使用 BindAnimation 脚本绑定给 lua 进行调用。</p><p>动画系统主要的脚本如下：</p><ul><li><p>NovaAnimation：针对不同类型的动画进行管理，支持动画的播放、暂停、停止等功能。</p></li><li><p>AnimationEntry：用于控制动画片段的播放、暂停、停止和重复播放，并且可以链接多个动画组成动画链。</p></li></ul><p>其他脚本：</p><ul><li>ActionAnimationProperty：Action将在指定的重复次数内调用，每帧一次。</li><li>AnchorAnimationProperty：用于操作 UI 元素锚点，动画化 UI 元素在 Unity 中的锚点位置。</li><li>CameraSizeAnimationProperty：用于控制 CameraController 中相机的 size 属性。</li><li>ColorAnimationProperty：用于控制各种 UI 元素或游戏对象的颜色变化，允许颜色在一段时间内进行渐变。</li><li>MaterialFloatAnimationProperty：主要用于在 Unity 的材质上对某个浮点属性进行动画处理。</li><li>OffsetAnimationProperty：用于对 RectTransform 的 offsetMin 和 offsetMax 属性进行动画处理。</li><li>OpacityAnimationProperty：用于控制 Unity 中不同 UI 元素或渲染组件的透明度属性进行动画处理。</li><li>PitchAnimationProperty：用于控制音频源或音频控制器的音调属性。</li><li>PositionAnimationProperty：用于控制 Transform 位置属性进行动画处理。</li><li>RectTransformAnimationProperty：用于动画控制 RectTransform 的位置属性进行动画处理。</li><li>RotationAnimationProperty：用于动画控制 RectTransform 的旋转属性进行动画处理。</li><li>ScaleAnimationProperty：用于动画控制 RectTransform 的缩放属性进行动画处理。</li><li>TextFadeInAnimationProperty：用于控制文本淡入效果的类。</li><li>TimeAnimationProperty：用于控制 Timeline 动画的类。</li><li>VolumeAnimationProperty：用于控制音频的音量动画。</li></ul><p>动画脚本的基类：</p><ul><li>FloatBaseAnimationProperty：用于处理基于浮点数的动画属性。</li><li>LazyComputableAnimationProperty：用于控制任何带有动画属性的对象，并支持懒计算。</li></ul><h2 id="输入系统"><a href="#输入系统" class="headerlink" title="输入系统"></a>输入系统</h2><h2 id="存档系统（旧）"><a href="#存档系统（旧）" class="headerlink" title="存档系统（旧）"></a>存档系统（旧）</h2><p><a href="https://github.com/Lunatic-Works/Nova/wiki/Restoration">Nova Wiki: Restoration</a></p><h3 id="global-nsav"><a href="#global-nsav" class="headerlink" title="global.nsav"></a>global.nsav</h3><p>为了实现存档和读档的速度，Nova的存档系统将 <code>global.nsav</code> 按照固定长度分块，一个块被称为一个 CheckpointBlock，默认为4kB。</p><blockquote><p>这里需要区分 <code>CheckpointBlock</code> 与 <code>GameStateCheckpoint</code>，前一个是存档文件的分块，后一个是用于恢复游戏状态的数据。</p><p>相似的还有 <code>Record</code> 与 <code>NodeRecord</code>，前一个是数据存储进存档系统的基本单位，后一个是标识剧情进度的数据。</p></blockquote><p>为了避免每次读取数据都从global.nsav文件中读取，Nova的存档系统引入了 <code>LRUCache</code> 机制。（它是一种常见的缓存淘汰策略，在缓存空间有限时，优先淘汰最近最少使用的数据）</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CheckpointSerializer GetBlock</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> CheckpointBlock <span class="title">GetBlock</span>(<span class="params"><span class="built_in">long</span> id</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!cachedBlocks.TryGetValue(id, <span class="keyword">out</span> <span class="keyword">var</span> block))</span><br><span class="line">    &#123;</span><br><span class="line">        block = CheckpointBlock.FromFile(file, id);</span><br><span class="line">        cachedBlocks[id] = block;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CheckpointSerializer AppendBlock</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> CheckpointBlock <span class="title">AppendBlock</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> id = endBlock++;</span><br><span class="line">    <span class="keyword">var</span> block = <span class="keyword">new</span> CheckpointBlock(file, id);</span><br><span class="line">    cachedBlocks[id] = block;</span><br><span class="line">    <span class="keyword">return</span> block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>global.nsav</code> 包含三种类型的数据：</p><ol><li><code>global save</code> 里面记录了存档时间标识和 <code>Reached</code> 数据以及 <code>Checkpoint</code> 数据在文件中的位置索引。</li><li><code>Reached链表</code>：存储所有已达剧情，<code>ReachedEndData</code>、<code>ReachedDialogueData</code>。<ol><li><code>ReachedDialogueData</code>：一条已读对话的信息，包括该对话的语音信息和文本是否需要插值。</li><li><code>ReachedEndData</code>一个已读结局的名称。</li></ol></li><li><code>Checkpoint链表</code>：存储游戏历史中的所有状态，例如游戏中的音频大小、文本的位置和内容。</li></ol><p>global.nsav的文件结构大致如下图所示。</p><p><img src="/./assets/global.nsav-phy.svg" alt="global.nsav-phy"></p><p>可以参照CheckpointBlock的Flush方法的实现来理解。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CheckpointBlock Flush</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Flush</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!dirty || stream == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> version = BitConverter.GetBytes(CheckpointSerializer.Version);</span><br><span class="line">        <span class="keyword">var</span> header = CheckpointSerializer.FileHeader;</span><br><span class="line">        Buffer.BlockCopy(header, <span class="number">0</span>, data, <span class="number">0</span>, header.Length);</span><br><span class="line">        Buffer.BlockCopy(version, <span class="number">0</span>, data, header.Length, <span class="number">4</span>);</span><br><span class="line">        index += CheckpointSerializer.FileHeaderSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> x = BitConverter.GetBytes(_nextBlock);</span><br><span class="line">    Buffer.BlockCopy(x, <span class="number">0</span>, data, index, HeaderSize);</span><br><span class="line">    stream.Seek(offset, SeekOrigin.Begin);</span><br><span class="line">    stream.Write(data, <span class="number">0</span>, BlockSize);</span><br><span class="line">    dirty = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CheckpointBlock-类图"><a href="#CheckpointBlock-类图" class="headerlink" title="CheckpointBlock 类图"></a>CheckpointBlock 类图</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">CheckpointBlock</span> &#123;</span><br><span class="line">    + BlockSize : <span class="built_in">int</span></span><br><span class="line">    + HeaderSize : <span class="built_in">int</span></span><br><span class="line">    + DataSize : <span class="built_in">int</span></span><br><span class="line">    $ GetBlockID(offset : <span class="built_in">long</span>) <span class="built_in">long</span></span><br><span class="line">    $ GetBlockIDIndex(offset : <span class="built_in">long</span>, <span class="keyword">out</span> <span class="built_in">int</span> index) <span class="built_in">long</span></span><br><span class="line">    + id : <span class="built_in">long</span></span><br><span class="line">    - offset : <span class="built_in">long</span></span><br><span class="line">    + dataOffset : <span class="built_in">long</span></span><br><span class="line">    + nextOffset : <span class="built_in">long</span></span><br><span class="line">    + segment : ByteSegment</span><br><span class="line">    - dirty : <span class="built_in">bool</span></span><br><span class="line">    - stream : Stream</span><br><span class="line">    - data : <span class="built_in">byte</span>[]</span><br><span class="line">    $ FromFile(Stream stream, <span class="built_in">long</span> id) CheckpointBlock</span><br><span class="line">    + MarkDirty() <span class="keyword">void</span></span><br><span class="line">    + Flush() <span class="keyword">void</span></span><br><span class="line">    + Dispose()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="如何向global-nsav中添加记录"><a href="#如何向global-nsav中添加记录" class="headerlink" title="如何向global.nsav中添加记录"></a>如何向global.nsav中添加记录</h4><p><code>AppendRecord</code> 会首先在 <code>Record</code>的开头标记数据的大小，然后再将数据写入。</p><p>如果当前CheckpointBlock无法完全容纳数据，则剩余的数据将被写入下一个CheckpointBlock中。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AppendRecord</span>(<span class="params"><span class="built_in">long</span> offset, ByteSegment bytes</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> block = GetBlockIndex(offset, <span class="keyword">out</span> <span class="keyword">var</span> index);</span><br><span class="line">    <span class="keyword">var</span> segment = block.segment;</span><br><span class="line">    <span class="keyword">if</span> (index + RecordHeader &gt; segment.Count)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> CheckpointCorruptedException.RecordOverflow(offset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    segment.WriteInt(index, bytes.Count);</span><br><span class="line">    index += RecordHeader;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (pos &lt; bytes.Count)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> size = Math.Min(segment.Count - index, bytes.Count - pos);</span><br><span class="line">        segment.WriteBytes(index, bytes.Slice(pos, size));</span><br><span class="line">        block.MarkDirty();</span><br><span class="line">        pos += size;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt; bytes.Count)</span><br><span class="line">        &#123;</span><br><span class="line">            block = NextBlock(block);</span><br><span class="line">            segment = block.segment;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ByteSegment"><a href="#ByteSegment" class="headerlink" title="ByteSegment"></a>ByteSegment</h3><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  classDiagramclass ByteSegment {    - array: byte[]    %% 表示字节片段的起始位置在数组中的偏移量。    - offset: int    %% 表示字节片段的长度    + Count: int    + Slice(offset: int, count: int) ByteSegment    + Slice(offset: int) ByteSegment    + ToStream() MemoryStream    + ReadInt(offset: int) int    + ReadLong(offset: int) long    + ReadUlong(offset: int) ulong    + WriteInt(offset: int, value: int) void    + WriteLong(offset: int, value: long) void    + WriteUlong(offset: int, value: ulong) void    + ReadBytes(offset: int, bytes: byte[]) void    + ReadBytes(offset: int, bytes: ByteSegment) void    + ReadString(offset: int, count: int) string    + ReadString(offset: int) string    + WriteBytes(offset: int, bytes: byte[]) void    + WriteBytes(offset: int, bytes: ByteSegment) void    + WriteString(offset: int, str: string) void}  </pre></div><h3 id="CheckpointManager-CheckpointSerializer"><a href="#CheckpointManager-CheckpointSerializer" class="headerlink" title="CheckpointManager &amp; CheckpointSerializer"></a>CheckpointManager &amp; CheckpointSerializer</h3><p>存储数据的初始化由 <code>CheckpointManager</code> 类负责。在这里，会初始化<code>GlobalSave</code>、<code>ReachedEndData</code>和<code>ReachedDialogueData</code>。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CheckpointManager Init</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    serializer = <span class="keyword">new</span> CheckpointSerializer(globalSavePath);</span><br><span class="line">    <span class="keyword">if</span> (!File.Exists(globalSavePath))</span><br><span class="line">    &#123;</span><br><span class="line">        ResetGlobalSave();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        serializer.Open();</span><br><span class="line">        InitGlobalSave();</span><br><span class="line">        InitReached();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> fileName <span class="keyword">in</span> Directory.GetFiles(savePathBase, <span class="string">&quot;sav*.sav*&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> result = Regex.Match(fileName, <span class="string">@&quot;sav([0-9]+)\.sav&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (result.Groups.Count &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">int</span>.TryParse(result.Groups[<span class="number">1</span>].Value, <span class="keyword">out</span> <span class="built_in">int</span> id))</span><br><span class="line">        &#123;</span><br><span class="line">            bookmarksMetadata.Add(id, <span class="keyword">new</span> BookmarkMetadata</span><br><span class="line">            &#123;</span><br><span class="line">                saveID = id,</span><br><span class="line">                modifiedTime = File.GetLastWriteTime(fileName)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    inited = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitGlobalSave</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    globalSave = serializer.DeserializeRecord&lt;GlobalSave&gt;(CheckpointSerializer.GlobalSaveOffset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitReached</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    reachedDialogues.Clear();</span><br><span class="line">    reachedEnds.Clear();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> cur = globalSave.beginReached;</span><br><span class="line">         cur &lt; globalSave.endReached;</span><br><span class="line">         cur = serializer.NextRecord(cur))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">record</span> = serializer.DeserializeRecord&lt;IReachedData&gt;(cur);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">record</span> <span class="title">is</span> <span class="title">ReachedEndData</span> <span class="title">end</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            reachedEnds.Add(end.endName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">record</span> <span class="title">is</span> <span class="title">ReachedDialogueData</span> <span class="title">dialogue</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            SetReachedDialogueData(dialogue);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">record</span> <span class="title">is</span> <span class="title">NodeUpgradeMaker</span> <span class="title">maker</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            reachedDialogues.Remove(maker.nodeName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check each reached data is a prefix</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> reachedList <span class="keyword">in</span> reachedDialogues)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (reachedList.Value.Contains(<span class="literal">null</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> CheckpointCorruptedException.BadReachedData(reachedList.Key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CheckpointSerializer 类是用于序列化和反序列化游戏数据的关键部分。</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  classDiagramclass ISerializationBinder {    &lt;&lt;interface&gt;&gt;    + BindToType(string? assemblyName, string typeName) Type    + BindToName(Type serializedType, out string? assemblyName, out string? typeName) void}JsonTypeBinder --|&gt; ISerializationBinderclass JsonTypeBinder {    $ Assembly CurAssembly    $ HashSet~Assembly~ AllowedAssembly    $ IsPrimitiveType(Type serializedType, bool checkAssembly &#x3D; true) bool    $ IsAllowedAssembly(Type serializedType) bool    - IsGameType(Type serializedType) bool    - IsAllowedType(Type serializedType) bool    + BindToName(Type serializedType, out string assemblyName, out string typeName) void    + BindToType(string assemblyName, string typeName) Type}CheckpointJsonSerializer *-- JsonTypeBinderCheckpointJsonSerializer --&gt; JsonSerializerCheckpointSerializer *-- CheckpointJsonSerializerclass CheckpointSerializer {    + Version : int    + FileHeader : byte[]    + FileHeaderSize : int    + GlobalSaveOffset : int    - DefaultCompress : bool    - RecordHeader : int    - jsonSerializer : JsonSerializer    - path : string    - file : FileStream    - endBlock : long    - cachedBlocks : LRUCache~long, CheckpointBlock~    + Open()    + Dispose()    - GetBlock(long id) CheckpointBlock    - GetBlockIndex(long offset, out int index) CheckpointBlock    + GetRecord(long offset) ByteSegment    + GetNodeRecord(long offset) NodeRecord    - AppendBlock() CheckpointBlock    - NextBlock(CheckpointBlock block) CheckpointBlock    + BeginRecord() long    + NextRecord(long offset) long    + AppendRecord(long offset, ByteSegment bytes) void    + UpdateNodeRecord(NodeRecord record) void    + SerializeRecord~T~(long offset, T data, bool compress &#x3D; DefaultCompress) void    + DeserializeRecord~T~(long offset, bool compress &#x3D; DefaultCompress) T    + ReadBookmark(string path, bool compress &#x3D; DefaultCompress) Bookmark    + WriteBookmark(string path, Bookmark obj, bool compress &#x3D; DefaultCompress) void}  </pre></div><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  classDiagramclass CheckpointManager {    - saveFolder : string    - frozen : bool    - savePathBase : string    - globalSavePath : string    - backupPath : string    - globalSave : GlobalSave    - globalSaveDirty : bool    - reachedDialogues : Dictionary&lt; string,List~ReachedDialogueData~ &gt;    - reachedEnds : SerializableHashSet~string~    - cachedBookmarks : Dictionary~int, Bookmark~    + bookmarksMetadata : Dictionary~int, BookmarkMetadata~    - serializer : CheckpointSerializer    - inited : bool    + Init() void    + NextRecord() long    + InitReached() void    + NewReached() void    + SetReachedDialogueData(data : ReachedDialogueData) void    + AppendReachedRecord(data : IReachedData) void    + SetReached(data : ReachedDialogueData)    + SetEndReached(endName : string)    + IsReachedAnyHistory(string nodeName, int dialogueIndex) bool    + GetReachedDialogueData(string nodeName, int dialogueIndex) ReachedDialogueData    + IsEndReached(string endName) bool    + InvalidateReachedData(string nodeName) void    + beginNodeOffset : long    - NewCheckpointRecord() void    + NextCheckpoint(long offset) long    + GetNextNode(NodeRecord prevRecord, string name, Variables variables, int beginDialogue) NodeRecord    + GetNodeRecord(long offset) NodeRecord    + CanAppendCheckpoint(long checkpointOffset) bool    + AppendDialogue(NodeRecord nodeRecord, int dialogueIndex, bool shouldSaveCheckpoint) void    + AppendCheckpoint(int dialogueIndex, GameStateCheckpoint checkpoint) long    + GetCheckpointDialogue(long offset) int    + GetCheckpoint(long offset) GameStateCheckpoint    %% 这里是CheckpointUpgrade，和核心系统关系不大，暂时省略    - InitGlobalSave() void    - UpdateGlobalSave() void    - ResetGlobalSave() void    + BackupGlobalSave() void    + RestoreGlobalSave() void    - GetBookmarkFileName(int saveID) string    - ReplaceCache(int saveID, Bookmark bookmark) Bookmark    + SaveBookmark(int saveID, Bookmark bookmark, bool cache &#x3D; true) void    + LoadBookmark(int saveID, bool cache &#x3D; true) Bookmark    + DeleteBookmark(int saveID) void    + EagerLoadRange(int beginSaveID, int endSaveID) void}  </pre></div><h3 id="Bookmark"><a href="#Bookmark" class="headerlink" title="Bookmark"></a>Bookmark</h3><p>存档&#x2F;读档界面中的每个存档称为书签（Bookmark），记录nodeOffset、checkpointOffset、dialogueIndex</p><p>自动存档、快速存档与手动存档的格式是一样的</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  classDiagramclass Bookmark {    + ScreenshotWidth : int    + ScreenshotHeight : int    + nodeOffset : long    + checkpointOffset : long    + dialogueIndex : int    + description : DialogueDisplayData    + creationTime : DateTime    + globalSaveIdentifier : long    + screenshotBytes : byte[]    + screenshotTexture : Texture2D    + screenshot : Texture2D}  </pre></div><h3 id="NodeRecord-1"><a href="#NodeRecord-1" class="headerlink" title="NodeRecord"></a>NodeRecord</h3><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  classDiagramclass NodeRecord {    - HeaderSize : int    + offset : long    + child : long    + sibling : long    + beginDialogue : int    + endDialogue : int    + lastCheckpointDialogue : int    + variablesHash : ulong    + name : string    + ToByteSegment() ByteSegment}  </pre></div><h3 id="RestoreData-and-SerializedData"><a href="#RestoreData-and-SerializedData" class="headerlink" title="RestoreData and SerializedData"></a>RestoreData and SerializedData</h3><p><strong>GameStateCheckpoint</strong></p><p>该类存储游戏对象下所有已注册可还原器在某一步的所有还原信息。</p><p>由于脚本语法的设计，只有在运行时才能知道每一步的对象状态。</p><p>为了实现后退功能，游戏状态对象应知道每一步的所有 GameStateRestoreEntry，以便执行后退。为使后退功能在从检查点加载后仍能正常工作，CheckpointManager 应存储所有走过的对话框的 GameStateRestoreEntry。</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  classDiagramclass ISerializedData {    &lt;&lt;interface&gt;&gt;}IRestoreData --|&gt; ISerializedDataclass IRestoreData {    &lt;&lt;interface&gt;&gt;}IReachedData --|&gt; ISerializedDataclass IReachedData {    &lt;&lt;interface&gt;&gt;}GameStateCheckpoint --&gt; ISerializedDataclass GameStateCheckpoint {    + dialogueIndex : int    + stepsCheckpointRestrained : int    + restoreDatas : Dictionary~string, IRestoreData~    + variables : Variables}ReachedEndData --&gt; IReachedDataclass ReachedEndData {    + endName: string}ReachedDialogueData --&gt; IReachedDataclass ReachedDialogueData {    + nodeName : string    + dialogueIndex : int    + voices : VoiceEntries    + needInterpolate: bool    + textHash : string}class ReachedDialoguePosition {    + nodeRecord ： NodeRecord    + checkpointOffset : long    + dialogueIndex : int}  </pre></div><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  classDiagramclass GlobalSave {    + identifier : long    + beginReached : long    + endReached : long    + beginCheckpoint : long    + endCheckpoint : long    + nodeHashes : Dictionary~string, ulong~    + data : Dictionary~string, object~}  </pre></div><h3 id="IRestorable"><a href="#IRestorable" class="headerlink" title="IRestorable"></a>IRestorable</h3><p>IRestorable 接口代表一个对象，当 GameState 向后移动时，该对象会恢复其状态。</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  classDiagramclass IRestorable {    + restorableName : string    + GetRestoreData() IRestoreData    + Restore(restoreData : IRestoreData) void}  </pre></div>]]></content>
      
      
      <categories>
          
          <category> game development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在vscode中为c#编写单元测试</title>
      <link href="/2024/05/12/writing_unit_tests_for_csharp_in_vscode/"/>
      <url>/2024/05/12/writing_unit_tests_for_csharp_in_vscode/</url>
      
        <content type="html"><![CDATA[<h2 id="如何从零开始创建一个单元测试工程"><a href="#如何从零开始创建一个单元测试工程" class="headerlink" title="如何从零开始创建一个单元测试工程"></a>如何从零开始创建一个单元测试工程</h2><p><strong>创建测试单元工程</strong></p><p>创建测试文件的方法和新建项目类似，都是使用<code>dotnet new</code>命令。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dotnet new xunit</span><br></pre></td></tr></table></figure><p><strong>为测试单元工程添加需要测试的工程的项目引用</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dotnet add reference ..\program\program.csproj</span><br></pre></td></tr></table></figure><p><strong>为sln文件添加测试单元工程的项目引用</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dotnet sln add ..\program.test\program.test.csproj</span><br></pre></td></tr></table></figure><p>文件的目录结构应大致如下树状图所示。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">project/</span><br><span class="line">├─program/</span><br><span class="line">│├─src/</span><br><span class="line">│└─program.csproj</span><br><span class="line">├─program.test/</span><br><span class="line">│├─src/</span><br><span class="line">│└─program.test.csproj</span><br><span class="line">└─program.sln</span><br></pre></td></tr></table></figure><p><strong>运行测试单元</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dotnet test</span><br></pre></td></tr></table></figure><h2 id="单元测试中如何输出日志"><a href="#单元测试中如何输出日志" class="headerlink" title="单元测试中如何输出日志"></a>单元测试中如何输出日志</h2><blockquote><p>Q：xUnit为什么没有办法直接打印输出？</p><p>A：xUnit的测试会新开一个进程进行测试，因此运行<code>dotnet test</code>命令的进程没有办法捕获xUnit进程的输出。</p></blockquote><p>解决方案：在测试代码中添加<code>ITestOutputHelper</code>接口，并在构造函数中将其初始化，之后使用该接口的WriteLine方法输出文本。</p><span id="more"></span><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Xunit;</span><br><span class="line"><span class="keyword">using</span> Xunit.Abstractions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyTestClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定义接口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ITestOutputHelper output;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTestClass</span>(<span class="params">ITestOutputHelper output</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 初始化接口</span></span><br><span class="line">        <span class="keyword">this</span>.output = output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Fact</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MyTest</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> temp = <span class="string">&quot;my class!&quot;</span>;</span><br><span class="line">        output.WriteLine(<span class="string">&quot;This is output from &#123;0&#125;&quot;</span>, temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里要注意的是，vscode中如果想要看到标准输出，需要在<code>dotnet test</code>命令后添加额外的参数<code>--logger &quot;console;verbosity=detailed&quot;</code>，也就是运行以下命令。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dotnet test --logger &quot;console;verbosity=detailed&quot;</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://learn.microsoft.com/zh-cn/dotnet/core/testing/unit-testing-with-dotnet-test">Microsoft：使用 dotnet test 和 xUnit 在 .NET 中对 C# 进行单元测试</a></p><p><a href="https://zhuanlan.zhihu.com/p/386588635">知乎：VSCode + xUnit 编写 C# 单元测试</a></p><p><a href="https://xunit.net/docs/capturing-output">xUnit：Capturing Output</a></p><p><a href="https://www.cnblogs.com/dudu/p/9391959.html">博客园：终于解决 xUnit.net 测试中无法输出到控制台的问题</a></p>]]></content>
      
      
      <categories>
          
          <category> programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> csharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何编译Godot（Godot &amp; Godot with C#）</title>
      <link href="/2024/05/11/how_to_build_godot_and_godot_for_csharp/"/>
      <url>/2024/05/11/how_to_build_godot_and_godot_for_csharp/</url>
      
        <content type="html"><![CDATA[<p>要在Windows下编译Godot, 需要以下环境:</p><ul><li><p><a href="https://visualstudio.microsoft.com/zh-hans/downloads/">Visual Studio Community</a>：使用最新版本。</p></li><li><p><a href="https://mingw-w64.org/">MinGW-w64</a>：可以替代 Visual Studio。请务必将其安装&#x2F;配置为使用 posix 线程模型。使用 MinGW 编译主分支时，需要 GCC 9 或更高版本。</p></li><li><p><a href="https://www.python.org/downloads/windows/">Python 3.6+</a>：确保在安装程序中启用将 Python 添加到环境变量中。</p></li><li><p><a href="https://scons.org/pages/download.html">SCons 3.0+</a>：构建系统。建议使用最新版本，特别是为了正确支持最近发布的 Visual Studio。</p></li></ul><span id="more"></span><p>为了方便起见，建议使用 <code>scoop</code> 安装所需的软件，因为它会默认将软件的路径配置到环境变量，相较于手动安装更省事一些。</p><p><strong>安装scoop</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</span><br><span class="line">Invoke-RestMethod -Uri https://get.scoop.sh | Invoke-Expression</span><br></pre></td></tr></table></figure><p><strong>为 Scoop 设置代理</strong></p><blockquote><p>可选：如果你的scoop无法正常下载应用</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">scoop config proxy ip:port</span></span><br><span class="line">scoop config proxy 127.0.0.1:7890</span><br></pre></td></tr></table></figure><p><strong>安装环境</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scoop install gcc python scons make mingw</span><br></pre></td></tr></table></figure><p><strong>安装 scons</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m pip install scons</span><br></pre></td></tr></table></figure><h2 id="编译-Godot"><a href="#编译-Godot" class="headerlink" title="编译 Godot"></a>编译 Godot</h2><p><strong>下载源代码</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/godotengine/godot.git</span><br></pre></td></tr></table></figure><p><strong>使用 scons 编译源代码</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scons platform=windows</span><br></pre></td></tr></table></figure><p>等待编译完成后，可执行文件可在 <code>godot/bin/</code> 目录下看到。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">godot</span><br><span class="line">└─bin</span><br><span class="line">  └─godot.windows.editor.x86_64.console.exe</span><br><span class="line">  └─godot.windows.editor.x86_64.exe</span><br><span class="line">  └─godot.windows.editor.x86_64.exp</span><br><span class="line">  └─godot.windows.editor.x86_64.lib</span><br></pre></td></tr></table></figure><h2 id="编译-Godot-with-C"><a href="#编译-Godot-with-C" class="headerlink" title="编译 Godot with C#"></a>编译 Godot with C#</h2><p>使用源代码构建出 mono 版本的godot需要安装 <a href="https://dotnet.microsoft.com/en-us/download/dotnet">.NET SDK</a></p><p><strong>下载源代码</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/godotengine/godot.git</span><br></pre></td></tr></table></figure><p><strong>使用 scons 编译源代码</strong></p><p>若要启用 <code>godot</code> 的 <code>c#</code> 支持，需要在构建时添加 <code>module_mono_enabled=yes</code> 命令。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scons platform=windows module_mono_enabled=yes</span><br></pre></td></tr></table></figure><p>命令执行后，godot的文件目录结构应如下所示。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">godot</span><br><span class="line">└─bin</span><br><span class="line">  └─godot.windows.editor.x86_64.mono.console.exe</span><br><span class="line">  └─godot.windows.editor.x86_64.mono.exe</span><br><span class="line">  └─godot.windows.editor.x86_64.mono.exp</span><br><span class="line">  └─godot.windows.editor.x86_64.mono.lib</span><br></pre></td></tr></table></figure><p>但此时的 <code>godot mono</code> 还无法运行，我们需要为其添加绑定。</p><p><strong>使用 godot mono 生成 .Net glue</strong></p><p>在 godot 目录下输入以下命令。</p><p>该命令将指示 Godot 在 <code>godot/modules/mono/glue/GodotSharp/GodotSharp/Generated</code> 目录下生成 Godot API 的 C# 绑定文件，并在 <code>godot/modules/mono/glue/GodotSharp/GodotSharpEditor/Generated</code> 目录下生成编辑器工具的 C# 绑定文件。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/godot.windows.editor.x86_64.mono --headless --generate-mono-glue modules/mono/glue</span><br></pre></td></tr></table></figure><p><strong>使用python脚本依照glue生成托管库</strong></p><p>生成 <code>.NET glue</code> 后，可以使用脚本生成托管库。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin</span><br></pre></td></tr></table></figure><p>命令执行后，<code>bin/</code> 目录下应该会生成出一个 <code>GodotSharp</code> 目录。</p><p>有了它，godot mono 就可以使用 c# 开发项目了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">godot</span><br><span class="line">└─bin</span><br><span class="line">  └─GodotSharp/</span><br><span class="line">  └─godot.windows.editor.x86_64.mono.console.exe</span><br><span class="line">  └─godot.windows.editor.x86_64.mono.exe</span><br><span class="line">  └─godot.windows.editor.x86_64.mono.exp</span><br><span class="line">  └─godot.windows.editor.x86_64.mono.lib</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://scoop.sh/">Scoop</a></p><p><a href="https://github.com/ScoopInstaller/scoop/wiki/Using-Scoop-behind-a-proxy">Scoop Proxy</a></p><p><a href="https://docs.godotengine.org/zh-cn/4.x/contributing/development/compiling/compiling_for_windows.html">Godot Docs：Compiling for windows</a></p><p><a href="https://docs.godotengine.org/en/stable/contributing/development/compiling/compiling_with_dotnet.html">Godot Docs：Compiling with dotnet</a></p>]]></content>
      
      
      <categories>
          
          <category> game development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> godot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Book &amp; Video &amp; Game Record List</title>
      <link href="/2024/04/13/bvg-list/"/>
      <url>/2024/04/13/bvg-list/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="left">Name</th><th align="left">Type</th><th align="left">Date</th></tr></thead><tbody><tr><td align="left">Evangelion: Air&#x2F;真心为你</td><td align="left">Video</td><td align="left">2024&#x2F;04&#x2F;13</td></tr><tr><td align="left">Evangelion: 破</td><td align="left">Video</td><td align="left">2024&#x2F;04&#x2F;13</td></tr><tr><td align="left">Evangelion: Q</td><td align="left">Video</td><td align="left">2024&#x2F;04&#x2F;15</td></tr><tr><td align="left">Evangelion: 终</td><td align="left">Video</td><td align="left">2024&#x2F;04&#x2F;19</td></tr><tr><td align="left">流浪地球制作手记</td><td align="left">Book</td><td align="left">2024&#x2F;05&#x2F;01</td></tr><tr><td align="left">全部成为F</td><td align="left">Video</td><td align="left">2024&#x2F;06&#x2F;01</td></tr><tr><td align="left">贝果爱情故事</td><td align="left">Game</td><td align="left">2024&#x2F;08&#x2F;04</td></tr><tr><td align="left">搞定I：无压力工作的艺术</td><td align="left">Book</td><td align="left">2024&#x2F;07&#x2F;06</td></tr><tr><td align="left">旧制度与大革命</td><td align="left">Book</td><td align="left">2024&#x2F;07&#x2F;10</td></tr><tr><td align="left">世界秩序</td><td align="left">Book</td><td align="left">2024&#x2F;07&#x2F;12</td></tr><tr><td align="left">1973年的弹子球</td><td align="left">Book</td><td align="left">2024&#x2F;07&#x2F;13</td></tr><tr><td align="left">萤</td><td align="left">Book</td><td align="left">2024&#x2F;07&#x2F;15</td></tr><tr><td align="left">Unity人工智能游戏开发</td><td align="left">Book</td><td align="left">2024&#x2F;08&#x2F;08</td></tr><tr><td align="left">Unity3D人工智能编程精粹</td><td align="left">Book</td><td align="left">2024&#x2F;08&#x2F;08</td></tr><tr><td align="left">怎样做成大事</td><td align="left">Book</td><td align="left">2024&#x2F;08&#x2F;12</td></tr><tr><td align="left">检查力：打破信息茧房</td><td align="left">Book</td><td align="left">2024&#x2F;08&#x2F;14</td></tr><tr><td align="left">Unity API 解析</td><td align="left">Book</td><td align="left">2024&#x2F;08&#x2F;16</td></tr><tr><td align="left">魔法使之夜</td><td align="left">Game</td><td align="left">2024&#x2F;08&#x2F;18</td></tr><tr><td align="left">游戏架构: 核心技术与面试精粹</td><td align="left">Book</td><td align="left">2024&#x2F;08&#x2F;18</td></tr><tr><td align="left">Effective CSharp</td><td align="left">Book</td><td align="left">2024&#x2F;08&#x2F;19</td></tr><tr><td align="left">CSharp 7.0 核心技术指南</td><td align="left">Book</td><td align="left">2024&#x2F;08&#x2F;23</td></tr><tr><td align="left">烧掉数学书: 重新发明数学</td><td align="left">Book</td><td align="left">2024&#x2F;08&#x2F;24</td></tr><tr><td align="left">微积分的力量</td><td align="left">Book</td><td align="left">2024&#x2F;08&#x2F;24</td></tr><tr><td align="left">纯爱独白: 小小</td><td align="left">Game</td><td align="left">2024&#x2F;08&#x2F;26</td></tr><tr><td align="left">计算机：一部历史</td><td align="left">Book</td><td align="left">2024&#x2F;08&#x2F;27</td></tr><tr><td align="left">葬花：暗黑桃花源</td><td align="left">Game</td><td align="left">2024&#x2F;08&#x2F;31</td></tr><tr><td align="left">Unity 游戏优化</td><td align="left">Book</td><td align="left">2024&#x2F;09&#x2F;01</td></tr><tr><td align="left">攻壳机动队：无罪</td><td align="left">Video</td><td align="left">2024&#x2F;09&#x2F;08</td></tr><tr><td align="left">令和罕见物语</td><td align="left">Game</td><td align="left">2024&#x2F;09&#x2F;10</td></tr><tr><td align="left">无职转生: I</td><td align="left">Video</td><td align="left">2024&#x2F;09&#x2F;13</td></tr><tr><td align="left">日本最漫长的一天</td><td align="left">Video</td><td align="left">2024&#x2F;09&#x2F;17</td></tr><tr><td align="left">游戏编程模式</td><td align="left">Book</td><td align="left">2024&#x2F;09&#x2F;23</td></tr><tr><td align="left">胜者即是正义: II</td><td align="left">Video</td><td align="left">2024&#x2F;09&#x2F;28</td></tr><tr><td align="left">厌女</td><td align="left">Book</td><td align="left">2024&#x2F;09&#x2F;30</td></tr><tr><td align="left">沉默的迷宫</td><td align="left">Video</td><td align="left">2024&#x2F;10&#x2F;01</td></tr><tr><td align="left">铃芽户缔</td><td align="left">Video</td><td align="left">2024&#x2F;10&#x2F;01</td></tr><tr><td align="left">起风了</td><td align="left">Video</td><td align="left">2024&#x2F;10&#x2F;01</td></tr><tr><td align="left">我推的孩子: I</td><td align="left">Video</td><td align="left">2024&#x2F;10&#x2F;20</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> record </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
